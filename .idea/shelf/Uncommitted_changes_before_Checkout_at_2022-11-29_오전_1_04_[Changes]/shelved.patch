Index: app/src/main/java/com/example/fffroject/AlertReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.fffroject\r\n\r\nimport android.app.NotificationChannel\r\nimport android.app.NotificationManager\r\nimport android.app.PendingIntent\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.graphics.Color\r\nimport androidx.core.app.NotificationCompat\r\nimport android.media.RingtoneManager\r\nimport android.util.Log\r\nimport com.example.fffroject.fragment.FoodList\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.firestore.FirebaseFirestore\r\nimport com.google.firebase.firestore.Query\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\n\r\n//AlertReceiver class에서 알림 기능을 동작하도록\r\nclass AlertReceiver  : BroadcastReceiver() {\r\n    var auth : FirebaseAuth? = null\r\n    var firestore : FirebaseFirestore? = null\r\n    var user : FirebaseUser? = null\r\n    lateinit var foodlist: ArrayList<FoodList>\r\n\r\n    lateinit var foodindex: String\r\n    lateinit var notificationManager: NotificationManager\r\n    override fun onReceive(context: Context, intent: Intent) {\r\n        foodlist = arrayListOf<FoodList>()\r\n        // 파이어베이스 인증 객체\r\n        auth = FirebaseAuth.getInstance()\r\n        user = auth!!.currentUser\r\n        // 파이어스토어 인스턴스 초기화\r\n        firestore = FirebaseFirestore.getInstance()\r\n        notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\r\n\r\n        createNotificationChannel(context)\r\n        deliverNotification(context)\r\n    }\r\n\r\n    private fun createNotificationChannel(context: Context){\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            val notificationChannel = NotificationChannel(\r\n                CHANNEL_ID, // 채널의 아이디\r\n                CHANNEL_NAME, // 채널의 이름\r\n                NotificationManager.IMPORTANCE_HIGH\r\n                /*\r\n                1. IMPORTANCE_HIGH = 알림음이 울리고 헤드업 알림으로 표시\r\n                2. IMPORTANCE_DEFAULT = 알림음 울림\r\n                3. IMPORTANCE_LOW = 알림음 없음\r\n                4. IMPORTANCE_MIN = 알림음 없고 상태줄 표시 X\r\n                 */\r\n            )\r\n            notificationChannel.enableLights(true) // 불빛\r\n            notificationChannel.lightColor = Color.RED // 색상\r\n            notificationChannel.enableVibration(true) // 진동 여부\r\n            notificationChannel.description = context.getString(R.string.app_name) // 채널 정보\r\n            notificationManager?.createNotificationChannel(\r\n                notificationChannel)\r\n        }\r\n    }\r\n\r\n    private fun deliverNotification(context: Context) {\r\n        val contentIntent = Intent(context, FoodListActivity::class.java)\r\n        val contentPendingIntent = PendingIntent.getActivity(\r\n            context,\r\n            NOTIFICATION_ID, // requestCode\r\n            contentIntent, // 알림 클릭 시 이동할 인텐트\r\n            PendingIntent.FLAG_MUTABLE\r\n            /*\r\n            1. FLAG_UPDATE_CURRENT : 현재 PendingIntent를 유지하고, 대신 인텐트의 extra data는 새로 전달된 Intent로 교체\r\n            2. FLAG_CANCEL_CURRENT : 현재 인텐트가 이미 등록되어있다면 삭제, 다시 등록\r\n            3. FLAG_NO_CREATE : 이미 등록된 인텐트가 있다면, null\r\n            4. FLAG_ONE_SHOT : 한번 사용되면, 그 다음에 다시 사용하지 않음\r\n             */\r\n        )\r\n\r\n        firestore?.collection(\"user\")?.document(user!!.uid)?.collection(\"myfridge\")\r\n            ?.get()\r\n            ?.addOnCompleteListener { task ->\r\n                if (task.result?.size() != 0) {\r\n                    var count = 0\r\n                    var doc = task.result.documents?.get(0)\r\n                    foodindex = doc?.get(\"index\").toString()\r\n\r\n                    firestore?.collection(\"fridge\")?.document(\"$foodindex\")\r\n                        ?.collection(\"food\")\r\n                        ?.get()\r\n                        ?.addOnSuccessListener() { task ->\r\n                            count = task.size()\r\n\r\n                            for (i in 0 until task.size()){\r\n                                var doc = task.documents?.get(i)\r\n                                var dates = doc.get(\"deadline\").toString()\r\n                                var formatter = SimpleDateFormat(\"yyyy.MM.dd\")\r\n                                var nowdate = LocalDate.now().format(\r\n                                    DateTimeFormatter.ofPattern(\r\n                                        \"yyyy.MM.dd\"\r\n                                    )\r\n                                )\r\n                                var date = formatter.parse(dates).time\r\n                                var day = formatter.parse(nowdate).time\r\n                                var d_day = (date - day)/ (60 * 60 * 24 * 1000)\r\n                                if (d_day.toInt() < 3){\r\n\r\n                                    Log.d(\"성공:\", \"${d_day.toString()}\")\r\n                                    val builder1 = NotificationCompat.Builder(context, CHANNEL_ID)\r\n                                        .setSmallIcon(R.drawable.ic_launcher_foreground) // 아이콘\r\n                                        .setContentTitle(\"FFF\") // 제목\r\n\r\n                                        .setContentText(\"의 유통기한이 하루 남았습니다!\") // 내용\r\n                                        .setContentIntent(contentPendingIntent)\r\n                                        .setPriority(NotificationCompat.PRIORITY_HIGH)\r\n                                        .setAutoCancel(true)\r\n                                        .setDefaults(NotificationCompat.DEFAULT_ALL)\r\n                                    // Log.d(\"성공:\", \"${foodlist.get(0).name.toString()}\")\r\n                                    notificationManager?.notify(NOTIFICATION_ID, builder1.build())\r\n                                }\r\n                            }\r\n                        }\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n    companion object {\r\n        private const val NOTIFICATION_ID = 0\r\n        private const val CHANNEL_ID = \"channel_id\"\r\n        private const val CHANNEL_NAME = \"ChannelName\"\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/fffroject/AlertReceiver.kt b/app/src/main/java/com/example/fffroject/AlertReceiver.kt
--- a/app/src/main/java/com/example/fffroject/AlertReceiver.kt	(revision 0dd20f3eeae4b63d7f92ec88470ba1e064896062)
+++ b/app/src/main/java/com/example/fffroject/AlertReceiver.kt	(date 1669650666087)
@@ -107,13 +107,15 @@
                                 var day = formatter.parse(nowdate).time
                                 var d_day = (date - day)/ (60 * 60 * 24 * 1000)
                                 if (d_day.toInt() < 3){
+                                    var name = firestore?.collection("fridge")?.document("$foodindex")
+                                        ?.collection("food")?.document("name")?.get().toString()
 
                                     Log.d("성공:", "${d_day.toString()}")
                                     val builder1 = NotificationCompat.Builder(context, CHANNEL_ID)
                                         .setSmallIcon(R.drawable.ic_launcher_foreground) // 아이콘
                                         .setContentTitle("FFF") // 제목
 
-                                        .setContentText("의 유통기한이 하루 남았습니다!") // 내용
+                                        .setContentText(name+"의 유통기한이 하루 남았습니다!") // 내용
                                         .setContentIntent(contentPendingIntent)
                                         .setPriority(NotificationCompat.PRIORITY_HIGH)
                                         .setAutoCancel(true)
@@ -124,8 +126,8 @@
                             }
                         }
                 }
-            }
 
+            }
     }
 
     companion object {
Index: app/src/main/java/com/example/fffroject/FcmActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.fffroject\r\n\r\nimport android.app.AlarmManager\r\nimport android.app.PendingIntent\r\nimport android.app.TimePickerDialog\r\nimport android.content.Context\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.icu.util.Calendar\r\nimport android.os.Build\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.Button\r\nimport android.widget.CompoundButton\r\nimport android.widget.TimePicker\r\nimport android.widget.Toast\r\nimport androidx.annotation.RequiresApi\r\nimport com.example.fffroject.databinding.ActivityFcmBinding\r\nimport java.lang.reflect.Array.getInt\r\n\r\n\r\nclass FcmActivity : AppCompatActivity() {\r\n\r\n    //알람 시간 변수\r\n    var myampm: String = \"\"\r\n\r\n    var myHour: Int = -1\r\n    var myMin: Int = -1\r\n\r\n    // 전역 변수로 바인딩 객체 선언\r\n    private var mBinding: ActivityFcmBinding? = null\r\n    private var isNoticeOn: Boolean = false\r\n    // 매번 null 체크를 할 필요 없이 편의성을 위해 바인딩 변수 재 선언\r\n    private val binding get() = mBinding!!\r\n\r\n    @RequiresApi(Build.VERSION_CODES.N)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_fcm)\r\n\r\n\r\n        // 자동 생성된 뷰 바인딩 클래스에서의 inflate라는 메서드를 활용해서\r\n        // 액티비티에서 사용할 바인딩 클래스의 인스턴스 생성\r\n        mBinding = ActivityFcmBinding.inflate(layoutInflater)\r\n        // getRoot 메서드로 레이아웃 내부의 최상위 위치 뷰의\r\n        // 인스턴스를 활용하여 생성된 뷰를 액티비티에 표시 합니다.\r\n        setContentView(binding.root)\r\n\r\n        // 현재 알람 설정 상태 확인\r\n        loadNoticeData()\r\n\r\n        loadNoticeTime()\r\n\r\n        //스위치 현재 상태 확인\r\n        binding.RefAlarm.setOnCheckedChangeListener(object : CompoundButton.OnCheckedChangeListener{\r\n            override fun onCheckedChanged(buttonView: CompoundButton?, isChecked: Boolean) {\r\n                isNoticeOn = if(isChecked){\r\n                    Toast.makeText(this@FcmActivity, \"냉장고 알림이 켜졌어요!\", Toast.LENGTH_SHORT).show()\r\n                    true\r\n                }else{\r\n                    // on -> off\r\n                    Toast.makeText(this@FcmActivity, \"냉장고 알림이 꺼졌어요!\", Toast.LENGTH_SHORT).show()\r\n                    //delAlarm()\r\n                    false\r\n                }\r\n            }\r\n        })\r\n\r\n        fun getTime(button: Button, context: Context) {\r\n            //if(!isNoticeOn) return\r\n            val cal = Calendar.getInstance()\r\n\r\n\r\n            val timeSetListener = TimePickerDialog.OnTimeSetListener {timePicker, hour, minute ->\r\n                cal.set(Calendar.HOUR_OF_DAY, hour)\r\n                cal.set(Calendar.MINUTE, minute)\r\n\r\n                myHour = hour\r\n                myMin = minute\r\n\r\n                if(hour >= 13) {\r\n                    myampm  = \"오후\"\r\n                    var timestr : Int = myHour - 12\r\n                    if (timestr  < 10 && myMin < 10) {\r\n                        binding.Alarm.text = \"오후 0$timestr:0$myMin\"\r\n                    } else if (timestr < 10) {\r\n                        binding.Alarm.text = \"오후 0$timestr:$myMin\"\r\n                    } else if (myMin < 10) {\r\n                        binding.Alarm.text = \"오후 $timestr:0$myMin\"\r\n                    } else {\r\n                        binding.Alarm.text = \"오후 $timestr:$myMin\"\r\n                    }\r\n                } else {\r\n                    myampm = \"오전\"\r\n                    if(myHour == 0) {\r\n                        if(myMin < 10) {\r\n                            binding.Alarm.text = \"오전 12:0$myMin\"\r\n                        } else {\r\n                            binding.Alarm.text = \"오전 12:$myMin\"\r\n                        }\r\n                    } else if(myHour < 10 && myMin < 10) {\r\n                        binding.Alarm.text = \"오전 0$myHour:0$myMin\"\r\n                    } else if (myHour < 10) {\r\n                        binding.Alarm.text = \"오전 0$myHour:$myMin\"\r\n                    } else if (myMin < 10) {\r\n                        binding.Alarm.text = \"오전 $myHour:0$myMin\"\r\n                    } else {\r\n                        binding.Alarm.text = \"오전 $myHour:$myMin\"\r\n                    }\r\n                }\r\n\r\n                    //saveNoticeData(\"noticeStatus\", isNoticeOn)\r\n                    //addAlarm(hour.toInt(), minute.toInt())\r\n                    val pref = getSharedPreferences(\"my_pref\", 0)\r\n                    val edit = pref.edit()\r\n                    edit.putInt(\"noticeHour\", hour)\r\n                    edit.putInt(\"noticeMinute\", minute)\r\n                    edit.apply()\r\n                    Log.d(\"시간:\", \"${hour}\")\r\n\r\n                }\r\n\r\n            //다이얼로그 생성\r\n            val dialog = TimePickerDialog(\r\n                context,\r\n                android.R.style.Theme_Holo_Light_Dialog_NoActionBar,\r\n                timeSetListener,\r\n                cal.get(Calendar.HOUR_OF_DAY),\r\n                cal.get(Calendar.MINUTE),\r\n                false\r\n            )\r\n            dialog.getWindow()?.setBackgroundDrawableResource(android.R.color.transparent) //\r\n/*\r\n            dialog.setButton(TimePickerDialog.BUTTON_POSITIVE, \"확인\",\r\n                DialogInterface.OnClickListener { dialogInterface, i ->\r\n\r\n                })\r\n\r\n            dialog.setButton(TimePickerDialog.BUTTON_NEGATIVE, \"취소\",\r\n                DialogInterface.OnClickListener { dialogInterface, i ->\r\n                    binding.RefAlarm.isChecked = false\r\n                    delAlarm()\r\n                })*/\r\n            dialog.show()\r\n        }\r\n\r\n        binding.Alarm.setOnClickListener {\r\n            getTime(binding.Alarm, this)\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    // 알람 설정\r\n    fun addAlarm(myhour: Int, mymin: Int){\r\n\r\n        // 알람매니저 선언\r\n        var alarmManager : AlarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n        var intent = Intent(this, AlertReceiver::class.java)\r\n\r\n        var pendingIntent = PendingIntent.getBroadcast(this, 1, intent, PendingIntent.FLAG_IMMUTABLE)\r\n        var calendar = Calendar.getInstance()\r\n\r\n        calendar.set(java.util.Calendar.HOUR_OF_DAY, myhour)  //시간\r\n        calendar.set(java.util.Calendar.MINUTE, mymin)  //분\r\n        calendar.set(java.util.Calendar.SECOND, 0)  //초\r\n\r\n        // 지나간 시간의 경우 다음날 알람으로 울리도록\r\n        if(calendar.before(Calendar.getInstance())){\r\n            calendar.add(Calendar.DATE, 1)  //하루 더하기\r\n        }\r\n\r\n        //이미 예약된 경우 새로 덮어쓰도록\r\n        alarmManager.setExact(AlarmManager.RTC_WAKEUP, calendar.timeInMillis, pendingIntent)\r\n\r\n    }\r\n\r\n    // 알람 취소\r\n    fun delAlarm(){\r\n        // 알람매니저 선언\r\n        var alarmManager : AlarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\r\n        var intent = Intent(this, AlertReceiver::class.java)\r\n        //인텐트를 포함하는 인텐트, 사용하는 목적은 현재 앱이 아닌 외부의 앱(노티피케이션, 알람 등)이 현재 내가 개발한 앱을 열 수 있도록 허락할 수 있는 인텐트\r\n        var pendingIntent = PendingIntent.getBroadcast(this, 1, intent, 0)\r\n\r\n        alarmManager.cancel(pendingIntent)\r\n    }\r\n\r\n\r\n\r\n    // 현재 알림 설정 상태 불러오기\r\n    fun loadNoticeData(){\r\n        val pref = getSharedPreferences(\"my_pref\", MODE_PRIVATE)\r\n        // 스위치 on/off\r\n        isNoticeOn = pref.getBoolean(\"noticeStatus\", false)\r\n        binding.RefAlarm.isChecked = isNoticeOn\r\n        // on/off 따른 텍스트 색상 변경\r\n        if(isNoticeOn) {\r\n\r\n        }\r\n        else {\r\n\r\n        }\r\n\r\n\r\n    }\r\n    fun loadNoticeTime() {\r\n        val pref = getSharedPreferences(\"my_pref\", MODE_PRIVATE)\r\n\r\n/*\r\n\r\n        myhour = pref.getInt(\"noticeHour\", myhour)\r\n        mymin = pref.getInt(\"noticeMinute\", mymin)\r\n        binding.Alarm.text = \"$myampm $myhour:$mymin\"\r\n*/\r\n\r\n\r\n    }\r\n\r\n\r\n    // 종료\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n\r\n        // 알림 상태 저장\r\n        val pref = getSharedPreferences(\"my_pref\", 0)\r\n        val edit = pref.edit()\r\n        edit.putBoolean(\"noticeStatus\", isNoticeOn)\r\n        //edit.putInt(\"noticeHour\", myhour)\r\n        //edit.putInt(\"noticeMinute\", mymin)\r\n        edit.apply()\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/fffroject/FcmActivity.kt b/app/src/main/java/com/example/fffroject/FcmActivity.kt
--- a/app/src/main/java/com/example/fffroject/FcmActivity.kt	(revision 0dd20f3eeae4b63d7f92ec88470ba1e064896062)
+++ b/app/src/main/java/com/example/fffroject/FcmActivity.kt	(date 1669649716953)
@@ -111,7 +111,7 @@
                 }
 
                     //saveNoticeData("noticeStatus", isNoticeOn)
-                    //addAlarm(hour.toInt(), minute.toInt())
+                    addAlarm(hour.toInt(), minute.toInt())
                     val pref = getSharedPreferences("my_pref", 0)
                     val edit = pref.edit()
                     edit.putInt("noticeHour", hour)
