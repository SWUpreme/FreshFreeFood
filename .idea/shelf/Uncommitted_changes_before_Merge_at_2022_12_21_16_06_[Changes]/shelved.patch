Index: app/src/main/java/com/example/fffroject/DateTimeUtil.kt
===================================================================
diff --git a/app/src/main/java/com/example/fffroject/DateTimeUtil.kt b/app/src/main/java/com/example/fffroject/DateTimeUtil.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/fffroject/DateTimeUtil.kt	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ /dev/null	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
@@ -1,89 +0,0 @@
-package com.example.fffroject
-import androidx.annotation.IntRange
-import java.text.SimpleDateFormat
-import java.util.*
-
-object DateTimeUtil {
-    const val MINUTE_FORMAT = "%02d"
-    const val AM = "오전"
-    const val PM = "오후"
-    const val MINUTES_MIN = 0L
-    const val MINUTES_MAX = 60L
-    const val HOUR_MIN = 1L
-    const val HOUR_MAX = 24L
-
-    private const val UNIX_TRANS_NUM = 1000
-    private const val DEFAULT_HOUR_RANGE = 1
-    private const val timeTextFormat = "%s %d:%02d - %s %d:%02d"
-    private val dateFormat = SimpleDateFormat("yyyy.M.d (EEE)", Locale.KOREA)
-    private val dateKorFormat = SimpleDateFormat("yyyy년 M월 d일 (EEE)", Locale.KOREA)
-    private val timeRangeFormat = SimpleDateFormat("a K:00", Locale.KOREA)
-    private val timeFormat = SimpleDateFormat("K:mm", Locale.KOREA)
-    private val ampmFormat = SimpleDateFormat("a ", Locale.KOREA)
-
-    fun getAmPm(@IntRange(from = HOUR_MIN, to = HOUR_MAX) hour: Int) = if (hour >= 12) PM else AM
-
-    fun getHourForAmPm(hour: Int) = when {
-        hour == 0 -> 12
-        hour > 12 -> hour - 12
-        else -> hour
-    }
-
-    fun getReadableTimeString(
-        @IntRange(from = HOUR_MIN, to = HOUR_MAX) startHour: Int,
-        @IntRange(from = MINUTES_MIN, to = MINUTES_MAX - 1) startMin: Int,
-        @IntRange(from = HOUR_MIN, to = HOUR_MAX) endHour: Int,
-        @IntRange(from = MINUTES_MIN, to = MINUTES_MAX - 1) endMin: Int
-    ): String = timeTextFormat.format(
-        getAmPm(startHour), getHourForAmPm(startHour), startMin,
-        getAmPm(endHour), getHourForAmPm(endHour), endMin
-    )
-
-    fun getReadableTimeString(timestamp: Long): String = timeFormat.format(Date(timestamp * UNIX_TRANS_NUM))
-
-    fun getReadableDateString(timestamp: Long): String = dateFormat.format(Date(timestamp * UNIX_TRANS_NUM))
-
-    fun getReadableAmPmString(timestamp: Long): String = ampmFormat.format(Date(timestamp * UNIX_TRANS_NUM))
-
-    fun getReadableTimeRange(startAt: Long, endAt: Long): String {
-        val startTimeString = getReadableAmPmString(startAt) + getReadableTimeString(startAt)
-        val endTimeRange = getReadableAmPmString(endAt)
-        val endTimeString = if (startTimeString.startsWith(endTimeRange)) {
-            getReadableTimeString(endAt)
-        } else {
-            endTimeRange + getReadableTimeString(endAt)
-        }
-
-        return "$startTimeString - $endTimeString"
-    }
-
-    fun getCurrentTimeRangeString(): String {
-        val currentTime = Calendar.getInstance()
-        val startTimeString = timeRangeFormat.format(currentTime.time)
-        val endTimeString = timeRangeFormat.format(currentTime.apply {
-            add(Calendar.HOUR, DEFAULT_HOUR_RANGE)
-        }.time)
-
-        return "$startTimeString - $endTimeString"
-    }
-
-    fun getTodayString(): String = dateKorFormat.format(Calendar.getInstance().time).toString()
-
-    fun getTodayString(date: Date): String = dateKorFormat.format(date).toString()
-
-    fun getTodayString(calendar: Calendar): String = dateKorFormat.format(calendar.time).toString()
-
-    fun isCorrectSequence(
-        @IntRange(from = HOUR_MIN, to = HOUR_MAX) startHour: Int,
-        @IntRange(from = MINUTES_MIN, to = MINUTES_MAX - 1) startMin: Int,
-        @IntRange(from = HOUR_MIN, to = HOUR_MAX) endHour: Int,
-        @IntRange(from = MINUTES_MIN, to = MINUTES_MAX - 1) endMin: Int
-    ): Boolean {
-        if (startHour < endHour) {
-            return true
-        } else if (startHour > endHour) {
-            return false
-        }
-        return startMin < endMin
-    }
-}
Index: app/src/main/java/com/example/fffroject/BarCodeActivity.kt
===================================================================
diff --git a/app/src/main/java/com/example/fffroject/BarCodeActivity.kt b/app/src/main/java/com/example/fffroject/BarCodeActivity.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/fffroject/BarCodeActivity.kt	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ /dev/null	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
@@ -1,182 +0,0 @@
-package com.example.fffroject
-
-import android.content.Intent
-import android.os.Bundle
-import android.text.InputFilter
-import android.util.Log
-import android.view.View
-import android.widget.*
-import androidx.appcompat.app.AppCompatActivity
-import com.example.fffroject.fragment.FoodList
-import com.google.firebase.auth.FirebaseAuth
-import com.google.firebase.auth.FirebaseUser
-import com.google.firebase.firestore.FirebaseFirestore
-import com.google.zxing.integration.android.IntentIntegrator
-import kotlinx.android.synthetic.main.activity_barcode.*
-import kotlinx.coroutines.CoroutineScope
-import kotlinx.coroutines.Dispatchers.IO
-import kotlinx.coroutines.Dispatchers.Main
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.withContext
-import kotlinx.coroutines.withTimeoutOrNull
-import org.jsoup.Jsoup
-import org.jsoup.select.Elements
-import java.util.*
-
-
-class BarCodeActivity : AppCompatActivity() {
-
-    var auth: FirebaseAuth? = null
-    var firestore: FirebaseFirestore? = null
-    var user: FirebaseUser? = null
-    var fridgeindex : String? = null
-
-    lateinit var name: TextView
-    lateinit var deadline_year:EditText
-    lateinit var deadline_month: EditText
-    lateinit var deadline_day: EditText
-    lateinit var purchasedAt_year: EditText
-    lateinit var purchasedAt_month: EditText
-    lateinit var purchasedAt_day: EditText
-    lateinit var count: EditText
-    lateinit var upload_btn: Button
-    lateinit var scan_btn: Button
-
-    lateinit var foodlist: ArrayList<FoodList>
-    lateinit var foodindex: String
-    var done = false
-
-
-    //qr code scanner object
-    //private var integrator: IntentIntegrator? = null
-    val TAG: String = "로그"
-    val errMsg: String = "등록되지 않은 코드입니다."
-
-    override fun onCreate(savedInstanceState: Bundle?) {
-        super.onCreate(savedInstanceState)
-        setContentView(R.layout.activity_barcode)
-
-
-        auth = FirebaseAuth.getInstance()
-        user = auth!!.currentUser
-        firestore = FirebaseFirestore.getInstance()
-        foodlist = arrayListOf<FoodList>()
-
-        name = findViewById(R.id.name)
-        deadline_year = findViewById(R.id.fdeadlineYear)
-        deadline_month = findViewById(R.id.fdeadlineMonth)
-        deadline_month.setFilters(arrayOf<InputFilter>(InputFilterMinMax("1", "12")))
-        deadline_day = findViewById(R.id.fdeadlineDate)
-        purchasedAt_year = findViewById(R.id.fpurchasedAtYear)
-        purchasedAt_month = findViewById(R.id.fpurchasedAtMonth)
-        purchasedAt_month.setFilters(arrayOf<InputFilter>(InputFilterMinMax("1", "12")))
-        purchasedAt_day = findViewById(R.id.fpurchasedAtDate)
-        count = findViewById(R.id.count)
-        upload_btn = findViewById(R.id.upload_btn)
-        scan_btn = findViewById(R.id.scan_btn)
-        fridgeindex = intent.getStringExtra("index")  // 냉장고 id
-
-        //바코드 스캔버튼
-        scan_btn.setOnClickListener(View.OnClickListener {
-            name.text = ""
-            barcodode.text = ""
-            val integrator = IntentIntegrator(this@BarCodeActivity)
-            integrator.setBeepEnabled(false)
-            integrator.setOrientationLocked(false)
-            integrator.initiateScan()
-        })
-
-        // 데이터 추가
-        upload_btn.setOnClickListener {
-
-            if (user != null) {
-                var food_deadline = deadline_year.text.toString()+"."+deadline_month.text.toString()+"."+deadline_day.text.toString()
-                var purchasedAt = purchasedAt_year.text.toString()+"."+ purchasedAt_month.text.toString()+"."+ purchasedAt_day.text.toString()
-                foodindex = UUID.randomUUID().toString()
-                firestore?.collection("fridge")?.document("$fridgeindex")
-                    ?.collection("food")?.document("$foodindex")
-                    ?.set(
-                        hashMapOf(
-                            "index" to foodindex,
-                            "name" to name.text.toString(),
-                            "deadline" to food_deadline,
-                            "purchaseAt" to purchasedAt,
-                            "count" to count.text.toString().toInt(),
-                            "done" to done
-                        )
-                    )
-                    ?.addOnSuccessListener { finish() }
-                    ?.addOnFailureListener {  }
-            }
-
-
-            Toast.makeText(this, "저장되었습니다.", Toast.LENGTH_SHORT).show()
-        }
-    }
-
-
-    // 상품정보 크롤링
-    private fun setProductInfo(code: String) {
-        Log.d(TAG, "getProductInfo: called")
-        suspend fun getResultFromApi(): String {
-            val url = "http://www.koreannet.or.kr/home/hpisSrchGtin.gs1?gtin=${code}"
-            val doc = Jsoup.connect(url).timeout(1000 * 10).get()  //타임아웃 10초
-            val contentData : Elements = doc.select("div.productTit")
-            val productName = contentData.toString().substringAfterLast("&nbsp;").substringBefore("</div>")
-            var rtnValue : String = ""
-            if ( productName.toString().trim() !="" ) {
-                rtnValue = productName.toString().trim()
-            }
-            else {
-                rtnValue = errMsg //"유통물류 DB에 등록되지 않은 코드입니다."
-            }
-            return rtnValue
-        }
-
-        CoroutineScope(IO).launch {
-            val resultStr = withTimeoutOrNull(10000) {
-                getResultFromApi()
-            }
-
-            if (resultStr != null) {
-                withContext(Main) {
-                    name.text = resultStr
-                }
-            }
-        }
-    }
-
-
-
-    // QR/바코드 스캔 결과
-    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
-        Log.d(TAG, "onActivityResult: called")
-        // QR 코드를 찍은 결과를 변수에 담는다.
-        val result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data)
-        //결과가 있으면
-        if (result != null) {
-            //QRCode Scan 성공&컨텐츠가 있으면
-            if (result.contents != null) {
-                Log.d(TAG, "onActivityResult: result - ${result.contents}")
-                barcodode.text = result.contents
-                if (result.contents.startsWith("97")){
-                } else {
-                    // 상품정보 크롤링 호출
-                    setProductInfo(result.contents)
-                }
-                // 컨텐츠가 없으면
-            } else {
-                Toast.makeText(this, "Cancelled", Toast.LENGTH_LONG).show()
-            }
-            // 결과가 없으면
-        } else {
-            super.onActivityResult(requestCode, resultCode, data)
-        }
-
-    }
-
-    override fun onResume() {
-        super.onResume()
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/com/example/fffroject/NotificationHelper.kt
===================================================================
diff --git a/app/src/main/java/com/example/fffroject/NotificationHelper.kt b/app/src/main/java/com/example/fffroject/NotificationHelper.kt
deleted file mode 100644
--- a/app/src/main/java/com/example/fffroject/NotificationHelper.kt	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ /dev/null	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
@@ -1,68 +0,0 @@
-/*package com.example.fffroject
-
-import android.app.Notification
-import android.app.NotificationChannel
-import android.app.NotificationManager
-import android.app.PendingIntent
-import android.content.Context
-import android.content.ContextWrapper
-import android.content.Intent
-import android.graphics.Color
-import android.os.Build
-import androidx.annotation.RequiresApi
-import androidx.core.app.NotificationCompat
-
-//알림 기능
-class NotificationHelper(base: Context?) : ContextWrapper(base) {
-
-    //채널 변수 만들기
-    private val channelID: String = "channelID"
-    private val channelNm: String = "channelName"
-
-    init {
-        //안드로이드 버전이 오레오보다 크면
-        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O){
-
-            //채널 생성
-            createChannel()
-        }
-    }
-
-    //채널 생성 함수
-    @RequiresApi(Build.VERSION_CODES.O)
-    private fun createChannel(){
-
-        //객체 생성
-        val channel: NotificationChannel =
-            NotificationChannel(channelID, channelNm, NotificationManager.IMPORTANCE_DEFAULT)
-
-        //설정
-        channel.enableLights(true) //빛
-        channel.enableVibration(true) //진동
-        channel.lightColor = Color.RED
-        channel.lockscreenVisibility = Notification.VISIBILITY_PRIVATE
-        channel.setShowBadge(false)     // false 시 알림 채널이 알림 뱃지 안뜨게 함
-        //생성
-        getManager().createNotificationChannel(channel)
-    }
-
-    //NotificationManager 생성
-    fun getManager(): NotificationManager {
-
-        return getSystemService(NOTIFICATION_SERVICE) as NotificationManager
-    }
-
-    //Notification 설정
-    fun getChannelNotification(): NotificationCompat.Builder{
-        val intent = Intent(this, FoodListActivity::class.java)
-        val pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_MUTABLE)
-
-        return NotificationCompat.Builder(applicationContext, channelID)
-            .setContentTitle("FFF") //제목
-            .setContentText("냉장고야")//내용
-            .setWhen(System.currentTimeMillis())
-            .setSmallIcon(R.drawable.ic_launcher_background) //아이콘
-            .setContentIntent(pendingIntent)
-            .setAutoCancel(true)
-    }
-}*/
\ No newline at end of file
Index: app/src/main/res/layout/activity_barcode.xml
===================================================================
diff --git a/app/src/main/res/layout/activity_barcode.xml b/app/src/main/res/layout/activity_barcode.xml
deleted file mode 100644
--- a/app/src/main/res/layout/activity_barcode.xml	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ /dev/null	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
@@ -1,323 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    xmlns:app="http://schemas.android.com/apk/res-auto"
-    xmlns:tools="http://schemas.android.com/tools"
-    android:layout_width="match_parent"
-    android:layout_height="match_parent"
-    android:paddingBottom="10dp"
-
-    android:paddingTop="50dp"
-    tools:context=".BarCodeActivity">
-
-    <LinearLayout
-        android:id="@+id/linearLayout2"
-        android:layout_width="0dp"
-        android:layout_height="wrap_content"
-        android:layout_marginStart="35dp"
-        android:layout_marginTop="100dp"
-        android:layout_marginEnd="35dp"
-        android:orientation="vertical"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent">
-
-
-        <TextView
-            android:id="@+id/txtTitle"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:text="상품명"
-            android:textColor="#B4B4B4"
-            android:textSize="14sp" />
-
-        <EditText
-            android:id="@+id/name"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="4dp"
-            android:background="@drawable/txt_background_round"
-            android:hint="상품 이름을 입력 해 주세요."
-            android:maxLength="50"
-            android:minHeight="38dp"
-            android:paddingLeft="10dp"
-            android:singleLine="true"
-            android:textColor="#30353D"
-            android:textColorHint="#E9E9E9"
-            android:textSize="14sp"
-            tools:ignore="TouchTargetSizeCheck" />
-
-        <TextView
-            android:id="@+id/txtDeadline"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:text="유통기한"
-            android:textColor="#B4B4B4"
-            android:textSize="14sp" />
-
-        <LinearLayout
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:orientation="horizontal">
-
-            <EditText
-                android:id="@+id/fdeadlineYear"
-                android:layout_width="80dp"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="4dp"
-                android:layout_marginRight="4dp"
-                android:background="@drawable/txt_background_round"
-                android:inputType="date"
-                android:maxLength="4"
-                android:minHeight="38dp"
-                android:nextFocusDown="@+id/deadlineMonth"
-                android:paddingRight="10dp"
-                android:singleLine="true"
-                android:textAlignment="viewEnd"
-                android:textColor="#30353D"
-                android:textColorHint="#E9E9E9"
-                android:textSize="14sp"
-                tools:ignore="TouchTargetSizeCheck,SpeakableTextPresentCheck" />
-
-            <TextView
-                android:id="@+id/txtYear"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="4dp"
-                android:text="년"
-                android:textColor="#30353D"
-                android:textSize="14sp" />
-
-            <EditText
-                android:id="@+id/fdeadlineMonth"
-                android:layout_width="34dp"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="8dp"
-                android:layout_marginTop="4dp"
-                android:layout_marginRight="4dp"
-                android:background="@drawable/txt_background_round"
-                android:inputType="date"
-                android:maxLength="2"
-                android:minHeight="38dp"
-                android:nextFocusDown="@+id/deadlineDate"
-                android:paddingRight="10dp"
-                android:singleLine="true"
-                android:textAlignment="viewEnd"
-                android:textColor="#30353D"
-                android:textColorHint="#E9E9E9"
-                android:textSize="14sp"
-                tools:ignore="TouchTargetSizeCheck,SpeakableTextPresentCheck" />
-
-            <TextView
-                android:id="@+id/txtMonth"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="4dp"
-                android:text="월"
-                android:textColor="#30353D"
-                android:textSize="14sp" />
-
-            <EditText
-                android:id="@+id/fdeadlineDate"
-                android:inputType="number"
-                android:layout_width="40dp"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="8dp"
-                android:layout_marginTop="4dp"
-                android:layout_marginRight="4dp"
-                android:background="@drawable/txt_background_round"
-                android:maxLength="2"
-                android:minHeight="38dp"
-                android:nextFocusDown="@+id/purchasedAtYear"
-                android:paddingRight="10dp"
-                android:singleLine="true"
-                android:textAlignment="viewEnd"
-                android:textColor="#30353D"
-                android:textColorHint="#E9E9E9"
-                android:textSize="14sp"
-                tools:ignore="TouchTargetSizeCheck,SpeakableTextPresentCheck" />
-
-            <TextView
-                android:id="@+id/txtDate"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="4dp"
-                android:text="일"
-                android:textColor="#30353D"
-                android:textSize="14sp" />
-        </LinearLayout>
-
-        <TextView
-            android:id="@+id/txtPurchasedAt"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:text="구매일"
-            android:textColor="#B4B4B4"
-            android:textSize="14sp" />
-
-        <LinearLayout
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:orientation="horizontal">
-
-            <EditText
-                android:id="@+id/fpurchasedAtYear"
-                android:layout_width="80dp"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="4dp"
-                android:layout_marginRight="4dp"
-                android:background="@drawable/txt_background_round"
-                android:inputType="date"
-                android:maxLength="4"
-                android:minHeight="38dp"
-                android:nextFocusDown="@+id/purchasedAtMonth"
-                android:paddingRight="10dp"
-                android:singleLine="true"
-                android:textAlignment="viewEnd"
-                android:textColor="#30353D"
-                android:textColorHint="#E9E9E9"
-                android:textSize="14sp"
-                tools:ignore="TouchTargetSizeCheck,SpeakableTextPresentCheck" />
-
-            <TextView
-                android:id="@+id/txtYear2"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="4dp"
-                android:text="년"
-                android:textColor="#30353D"
-                android:textSize="14sp" />
-
-            <EditText
-                android:id="@+id/fpurchasedAtMonth"
-                android:inputType="number"
-                android:layout_width="40dp"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="8dp"
-                android:layout_marginTop="4dp"
-                android:layout_marginRight="4dp"
-                android:background="@drawable/txt_background_round"
-                android:maxLength="2"
-                android:minHeight="38dp"
-                android:nextFocusDown="@+id/purchasedAtDate"
-                android:paddingRight="10dp"
-                android:singleLine="true"
-                android:textAlignment="viewEnd"
-                android:textColor="#30353D"
-                android:textColorHint="#E9E9E9"
-                android:textSize="14sp"
-                tools:ignore="TouchTargetSizeCheck,SpeakableTextPresentCheck" />
-
-            <TextView
-                android:id="@+id/txtMonth2"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="4dp"
-                android:text="월"
-                android:textColor="#30353D"
-                android:textSize="14sp" />
-
-            <EditText
-                android:id="@+id/fpurchasedAtDate"
-                android:layout_width="40dp"
-                android:layout_height="wrap_content"
-                android:layout_marginLeft="8dp"
-                android:layout_marginTop="4dp"
-                android:layout_marginRight="4dp"
-                android:background="@drawable/txt_background_round"
-                android:inputType="date"
-                android:maxLength="2"
-                android:minHeight="38dp"
-                android:nextFocusDown="@+id/name"
-                android:paddingRight="10dp"
-                android:singleLine="true"
-                android:textAlignment="viewEnd"
-                android:textColor="#30353D"
-                android:textColorHint="#E9E9E9"
-                android:textSize="14sp"
-                tools:ignore="TouchTargetSizeCheck,SpeakableTextPresentCheck" />
-
-            <TextView
-                android:id="@+id/txtDate2"
-                android:layout_width="wrap_content"
-                android:layout_height="wrap_content"
-                android:layout_marginTop="4dp"
-                android:text="일"
-                android:textColor="#30353D"
-                android:textSize="14sp" />
-        </LinearLayout>
-
-        <TextView
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="15dp"
-            android:text="개수"
-            android:textColor="#B4B4B4"
-            android:textSize="14sp"/>
-
-        <EditText
-            android:id="@+id/count"
-            android:layout_width="match_parent"
-            android:layout_height="wrap_content"
-            android:layout_marginTop="4dp"
-            android:background="@drawable/txt_background_round"
-            android:hint="제품 개수를 입력 해 주세요."
-            android:maxLength="50"
-            android:minHeight="38dp"
-            android:paddingLeft="10dp"
-            android:singleLine="true"
-            android:text="1"
-            android:textColor="#30353D"
-            android:textColorHint="#E9E9E9"
-            android:textSize="14sp" />
-
-    </LinearLayout>
-
-    <Button
-        android:id="@+id/scan_btn"
-        android:layout_width="0dp"
-        android:layout_height="80dp"
-        android:layout_alignParentBottom="true"
-        android:layout_centerHorizontal="true"
-        android:layout_marginStart="35dp"
-        android:layout_marginTop="60dp"
-        android:layout_marginEnd="35dp"
-        android:background="@drawable/ic_btn_scan_long"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/linearLayout2"
-        tools:ignore="SpeakableTextPresentCheck" />
-
-    <Button
-        android:id="@+id/upload_btn"
-        android:layout_width="0dp"
-        android:layout_height="80dp"
-        android:layout_alignParentBottom="true"
-        android:layout_centerHorizontal="true"
-        android:layout_marginStart="35dp"
-        android:layout_marginTop="128dp"
-        android:layout_marginEnd="35dp"
-        android:background="@drawable/ic_btn_upload_long"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintHorizontal_bias="0.0"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/linearLayout2"
-        tools:ignore="SpeakableTextPresentCheck" />
-
-    <TextView
-        android:id="@+id/barcodode"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginTop="16dp"
-        android:text="바코드 번호"
-        android:visibility="invisible"
-        app:layout_constraintBottom_toTopOf="@+id/linearLayout2"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintHorizontal_bias="0.498"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toTopOf="parent" />
-
-
-</androidx.constraintlayout.widget.ConstraintLayout>
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"DesignSurface\">\n    <option name=\"filePathToZoomLevelMap\">\n      <map>\n        <entry key=\"../../../../../layout/custom_preview.xml\" value=\"0.11990407673860912\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable-v24/bg_receive_message.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable-v24/bg_send_message.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable-v24/ic_launcher_foreground.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable/btn_fridge_list.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable/dialog_background_round.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable/ic_food_gray.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable/ic_mypage_gray.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable/ic_refregerator_gray.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable/txt_background_round.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/drawable/txt_background_round2_blue.xml\" value=\"0.1\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_auth.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_barcode.xml\" value=\"0.22\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_chat.xml\" value=\"0.22\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_foodlist.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_main.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_main2.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_message.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_sharedetail.xml\" value=\"0.22\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_sharepost.xml\" value=\"0.22\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/activity_write.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/custom_dialog.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/dialog_addfridge.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/dialog_addimage.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/dialog_deletefridge.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/fragment_chat.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/fragment_enter.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/fragment_fridge.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/fragment_mypage.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/fragment_share.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/item_chat.xml\" value=\"0.22\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/item_foodlist.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/item_fridgelist.xml\" value=\"0.16770833333333332\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/item_message.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/FreshFreeFood/app/src/main/res/layout/item_sharelist.xml\" value=\"0.3333333333333333\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/drawable-v24/ic_launcher_foreground.xml\" value=\"0.20260416666666667\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/drawable/ic_food_gray.xml\" value=\"0.20260416666666667\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/drawable/ic_mypage_gray.xml\" value=\"0.20260416666666667\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/drawable/ic_refregerator_gray.xml\" value=\"0.19270833333333334\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/drawable/main_regregerator.xml\" value=\"0.20260416666666667\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/activity_auth.xml\" value=\"0.3079710144927536\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/activity_foodlist.xml\" value=\"0.32155797101449274\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/activity_main.xml\" value=\"0.22\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/activity_sharepost.xml\" value=\"0.32155797101449274\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/dialog_addfridge.xml\" value=\"0.31476449275362317\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/dialog_deletefridge.xml\" value=\"0.3242753623188406\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/fragment_divide.xml\" value=\"0.1765625\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/fragment_fridge.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/fragment_home.xml\" value=\"0.18385416666666668\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/fragment_mypage.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/fragment_refregerator.xml\" value=\"0.18697916666666667\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/fragment_share.xml\" value=\"0.16458333333333333\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/layout/item_fridgelist.xml\" value=\"0.3203125\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/menu/bottom_navigation_menu.xml\" value=\"0.18645833333333334\" />\n        <entry key=\"..\\:/Users/MinY/AndroidStudioProjects/FFFroject/app/src/main/res/menu/menu_login.xml\" value=\"0.3125\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable-v24/ic_launcher_foreground.xml\" value=\"0.1525\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable-v24/rounded_corner.xml\" value=\"0.1465\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable-v24/rounded_corner_box.xml\" value=\"0.1465\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable/btn_background_round_gray.xml\" value=\"0.1475\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable/dialog_background_round.xml\" value=\"0.192\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable/ic_launcher_background.xml\" value=\"0.1525\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable/menu_selector_color.xml\" value=\"0.1995\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable/recyclerview_divider.xml\" value=\"0.255\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable/txt_background_round.xml\" value=\"0.1465\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable/txt_background_round2_blue.xml\" value=\"0.2355\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/drawable/txt_background_round2_white.xml\" value=\"0.254\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_auth.xml\" value=\"0.23385416666666667\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_barcode.xml\" value=\"0.22056159420289856\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_chat.xml\" value=\"0.23697916666666666\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_chat_detail.xml\" value=\"0.23697916666666666\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_chat_list.xml\" value=\"0.2\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_chat_send_exist.xml\" value=\"0.2171875\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_fcm.xml\" value=\"0.23697916666666666\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_foodlist.xml\" value=\"0.72\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_foodlist_to_share.xml\" value=\"0.152\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_main.xml\" value=\"0.2\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_recyclerview.xml\" value=\"0.24947916666666667\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_region_select.xml\" value=\"0.4\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_share_update.xml\" value=\"0.23697916666666666\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_sharedetail.xml\" value=\"0.264\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_sharepost.xml\" value=\"0.4\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/activity_write.xml\" value=\"0.24947916666666667\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/custom_dialog.xml\" value=\"0.22056159420289856\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/dialog_addfridge.xml\" value=\"0.109375\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/dialog_addimage.xml\" value=\"0.2\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/dialog_background_round.xml\" value=\"0.2484375\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/dialog_deletefridge.xml\" value=\"0.109375\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/dialog_deletepost.xml\" value=\"0.2171875\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/dialog_selectregion.xml\" value=\"0.2484375\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/dialog_sharedone.xml\" value=\"0.264\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/fragment_fridge.xml\" value=\"0.2\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/fragment_mypage.xml\" value=\"0.1953125\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/fragment_share.xml\" value=\"0.264\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/item_chat_detail.xml\" value=\"0.23697916666666666\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/item_chat_detail_list.xml\" value=\"0.44991212653778556\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/item_chat_list.xml\" value=\"0.264\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/item_foodlist.xml\" value=\"0.22056159420289856\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/item_fridgelist.xml\" value=\"0.2\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/item_loading.xml\" value=\"0.2484375\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/item_recycler.xml\" value=\"0.24947916666666667\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/item_regionlist.xml\" value=\"0.2484375\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/layout/item_sharelist.xml\" value=\"0.264\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/menu/bottom_navigation_menu.xml\" value=\"0.24947916666666667\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/menu/chat_top_send.xml\" value=\"0.23697916666666666\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/menu/main_top_plus.xml\" value=\"0.264\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/menu/selectregion_top.xml\" value=\"0.2484375\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/menu/sharedetail_top_send.xml\" value=\"0.2484375\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/menu/sharepost_top_plus.xml\" value=\"0.264\" />\n        <entry key=\"..\\:/Users/serak/project/FreshFreeFood/app/src/main/res/xml/file_paths.xml\" value=\"0.23385416666666667\" />\n        <entry key=\"..\\:/fff/FreshFreeFood/app/src/main/res/layout/activity_auth.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/fff/FreshFreeFood/app/src/main/res/layout/activity_barcode.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/fff/FreshFreeFood/app/src/main/res/layout/activity_foodlist.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/fff/FreshFreeFood/app/src/main/res/layout/activity_recyclerview.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/fff/FreshFreeFood/app/src/main/res/layout/activity_write.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/fff/FreshFreeFood/app/src/main/res/layout/custom_dialog.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/fff/FreshFreeFood/app/src/main/res/layout/dialog_addfridge.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/fff/FreshFreeFood/app/src/main/res/layout/dialog_addimage.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"..\\:/fff/FreshFreeFood/app/src/main/res/layout/dialog_deletefridge.xml\" value=\"0.17916666666666667\" />\n        <entry key=\"app/src/main/res/drawable-v24/rounded_corner.xml\" value=\"0.198\" />\n        <entry key=\"app/src/main/res/drawable-v24/rounded_corner_box.xml\" value=\"0.198\" />\n        <entry key=\"app/src/main/res/drawable/btn_fridge_list.xml\" value=\"0.197\" />\n        <entry key=\"app/src/main/res/drawable/ic_food_gray.xml\" value=\"0.1355\" />\n        <entry key=\"app/src/main/res/drawable/menu_selector_color.xml\" value=\"0.198\" />\n        <entry key=\"app/src/main/res/drawable/progressbar_envlevel.xml\" value=\"0.1595\" />\n        <entry key=\"app/src/main/res/drawable/spinner_style.xml\" value=\"0.1345\" />\n        <entry key=\"app/src/main/res/drawable/txt_background_foodcount_round.xml\" value=\"0.1205\" />\n        <entry key=\"app/src/main/res/drawable/txt_background_round.xml\" value=\"0.1355\" />\n        <entry key=\"app/src/main/res/drawable/txt_background_round2_blue.xml\" value=\"0.1355\" />\n        <entry key=\"app/src/main/res/drawable/txt_background_round2_white.xml\" value=\"0.1355\" />\n        <entry key=\"app/src/main/res/drawable/txt_background_spinner.xml\" value=\"0.1205\" />\n        <entry key=\"app/src/main/res/layout/activity_auth.xml\" value=\"0.1945406485294951\" />\n        <entry key=\"app/src/main/res/layout/activity_barcode.xml\" value=\"0.22916666666666666\" />\n        <entry key=\"app/src/main/res/layout/activity_chat.xml\" value=\"0.1265625\" />\n        <entry key=\"app/src/main/res/layout/activity_foodlist.xml\" value=\"0.38104448742746616\" />\n        <entry key=\"app/src/main/res/layout/activity_main.xml\" value=\"0.31288178698851327\" />\n        <entry key=\"app/src/main/res/layout/activity_myshare.xml\" value=\"0.2708333333333333\" />\n        <entry key=\"app/src/main/res/layout/activity_recyclerview.xml\" value=\"0.3077858880778589\" />\n        <entry key=\"app/src/main/res/layout/activity_region_select.xml\" value=\"0.26811594202898553\" />\n        <entry key=\"app/src/main/res/layout/activity_share_update.xml\" value=\"0.25769927536231885\" />\n        <entry key=\"app/src/main/res/layout/activity_sharedetail.xml\" value=\"0.26811594202898553\" />\n        <entry key=\"app/src/main/res/layout/activity_sharepoint.xml\" value=\"0.31443470137578683\" />\n        <entry key=\"app/src/main/res/layout/activity_sharepost.xml\" value=\"0.49941603066264717\" />\n        <entry key=\"app/src/main/res/layout/activity_write.xml\" value=\"0.375\" />\n        <entry key=\"app/src/main/res/layout/dialog_addfridge.xml\" value=\"0.34038130165874103\" />\n        <entry key=\"app/src/main/res/layout/dialog_addimage.xml\" value=\"0.22916666666666666\" />\n        <entry key=\"app/src/main/res/layout/dialog_addmember.xml\" value=\"0.2644927536231884\" />\n        <entry key=\"app/src/main/res/layout/dialog_deletefridge.xml\" value=\"0.45813953488372094\" />\n        <entry key=\"app/src/main/res/layout/dialog_deletepost.xml\" value=\"0.26811594202898553\" />\n        <entry key=\"app/src/main/res/layout/dialog_dropmember.xml\" value=\"0.26811594202898553\" />\n        <entry key=\"app/src/main/res/layout/dialog_fixfridge.xml\" value=\"0.2644927536231884\" />\n        <entry key=\"app/src/main/res/layout/dialog_fixnickname.xml\" value=\"0.2644927536231884\" />\n        <entry key=\"app/src/main/res/layout/dialog_fridgeoption.xml\" value=\"0.22056159420289856\" />\n        <entry key=\"app/src/main/res/layout/dialog_memberoption.xml\" value=\"0.2644927536231884\" />\n        <entry key=\"app/src/main/res/layout/dialog_postoption.xml\" value=\"0.26811594202898553\" />\n        <entry key=\"app/src/main/res/layout/dialog_sharedone.xml\" value=\"0.26811594202898553\" />\n        <entry key=\"app/src/main/res/layout/dialog_showmember.xml\" value=\"0.5135245724000793\" />\n        <entry key=\"app/src/main/res/layout/dialog_treegrade.xml\" value=\"0.4590438400489697\" />\n        <entry key=\"app/src/main/res/layout/fragment_envlevel.xml\" value=\"0.3793640136718751\" />\n        <entry key=\"app/src/main/res/layout/fragment_fridge.xml\" value=\"0.29140603953394395\" />\n        <entry key=\"app/src/main/res/layout/fragment_mypage.xml\" value=\"0.4060356652949246\" />\n        <entry key=\"app/src/main/res/layout/fragment_share.xml\" value=\"0.23007246376811594\" />\n        <entry key=\"app/src/main/res/layout/item_foodlist.xml\" value=\"0.5696\" />\n        <entry key=\"app/src/main/res/layout/item_fridgelist.xml\" value=\"0.36910052290311884\" />\n        <entry key=\"app/src/main/res/layout/item_mysharelist.xml\" value=\"0.26811594202898553\" />\n        <entry key=\"app/src/main/res/layout/item_recycler.xml\" value=\"0.335\" />\n        <entry key=\"app/src/main/res/layout/item_sharelist.xml\" value=\"0.23007246376811594\" />\n        <entry key=\"app/src/main/res/menu/bottom_navigation_menu.xml\" value=\"0.271875\" />\n        <entry key=\"app/src/main/res/menu/chat_top_send.xml\" value=\"0.2682291666666667\" />\n        <entry key=\"app/src/main/res/menu/env_treegrade.xml\" value=\"0.2682291666666667\" />\n        <entry key=\"app/src/main/res/menu/main_top_plus.xml\" value=\"0.271875\" />\n        <entry key=\"app/src/main/res/menu/selectregion_top.xml\" value=\"0.271875\" />\n        <entry key=\"app/src/main/res/menu/sharepost_top_plus.xml\" value=\"0.271875\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"Android Studio default JDK\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ b/.idea/misc.xml	(date 1671605500310)
@@ -178,7 +178,7 @@
       </map>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="11" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"GRADLE\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"gradleJvm\" value=\"Android Studio default JDK\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n          </set>\n        </option>\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ b/.idea/gradle.xml	(date 1671605500310)
@@ -7,7 +7,7 @@
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="Android Studio default JDK" />
+        <option name="gradleJvm" value="Embedded JDK" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
Index: app/src/main/java/com/example/fffroject/AlertReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.fffroject\n\nimport android.app.NotificationChannel\nimport android.app.NotificationManager\nimport android.app.PendingIntent\nimport android.content.BroadcastReceiver\nimport android.content.Context\nimport android.content.Intent\nimport android.os.Build\nimport android.graphics.Color\nimport androidx.core.app.NotificationCompat\nimport android.media.RingtoneManager\nimport android.util.Log\nimport androidx.annotation.RequiresApi\nimport com.example.fffroject.fragment.FoodList\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.FirebaseUser\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.firebase.firestore.Query\nimport java.text.SimpleDateFormat\nimport java.time.LocalDate\nimport java.time.format.DateTimeFormatter\nimport java.util.*\n\n//AlertReceiver class에서 알림 기능을 동작하도록\nclass AlertReceiver : BroadcastReceiver() {\n    var auth: FirebaseAuth? = null\n    var firestore: FirebaseFirestore? = null\n    var user: FirebaseUser? = null\n    var fridgeindex : String? = null\n    var fridgename : String? = null\n\n    lateinit var notificationManager: NotificationManager\n\n    //onReceive: 알람 시간이 되었을 때 동작\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onReceive(context: Context, intent: Intent) {\n\n        // 파이어베이스 인증 객체\n        auth = FirebaseAuth.getInstance()\n        user = auth!!.currentUser\n        // 파이어스토어 인스턴스 초기화\n        firestore = FirebaseFirestore.getInstance()\n\n        notificationManager =\n            context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\n        createNotificationChannel(context)\n        deliverNotification(context)\n    }\n\n    private fun createNotificationChannel(context: Context) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n            val notificationChannel = NotificationChannel(\n                CHANNEL_ID, // 채널의 아이디\n                CHANNEL_NAME, // 채널의 이름\n                NotificationManager.IMPORTANCE_HIGH\n            )\n            notificationChannel.enableLights(true) // 불빛\n            notificationChannel.lightColor = Color.RED // 색상\n            notificationChannel.enableVibration(true) // 진동 여부\n            notificationChannel.description = context.getString(R.string.app_name) // 채널 정보\n            notificationManager?.createNotificationChannel(\n                notificationChannel\n            )\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.O)\n    private fun deliverNotification(context: Context) {\n//        val contentIntent = Intent(context, FoodListActivity::class.java)\n//        contentIntent.putExtra(\"index\", fridgeindex)\n//        contentIntent.putExtra(\"name\", fridgename)\n//\n//        val contentPendingIntent = PendingIntent.getActivity(\n//            context,\n//            NOTIFICATION_ID, // requestCode\n//            contentIntent, // 알림 클릭 시 이동할 인텐트\n//            PendingIntent.FLAG_MUTABLE\n//        )\n\n\n        // 내 냉장고에서 status가 true인 것만 불러오기\n        firestore?.collection(\"user\")?.document(user!!.uid)?.collection(\"myfridge\")\n            ?.whereEqualTo(\"status\", true)\n            ?.get()\n            ?.addOnCompleteListener { task ->\n                var count = 0\n                var compare = \"3000.12.31\" //비교대상\n                var mazinoname = \"\"  //식품이름\n                var fname = \"\"\n                var findex = \"\"\n                count = task.result.size()\n\n                if (task.result?.size() != 0) {\n                    for (i in 0 until count) {\n\n                        // 해당하는 나의 냉장고에서 냉장고id 받아오기\n                        var docindex = task.result.documents?.get(i)\n                        fridgeindex = docindex?.get(\"index\").toString()\n\n                        // 해당하는 나의 냉장고에서 냉장고 이름 받아오기\n                        var docname = task.result.documents?.get(i)\n                        fridgename = docname?.get(\"name\").toString()\n\n\n                        //index를 가지고 food에 접근\n                        firestore?.collection(\"fridge\")?.document(\"$fridgeindex\")\n                            ?.collection(\"food\")\n                            ?.orderBy(\"deadline\", Query.Direction.ASCENDING) //유통기한 임박순\n                            ?.get()\n                            ?.addOnSuccessListener() { task ->\n                                if (task.size() != 0) {\n\n                                    // 현재 날짜 가져오기\n                                    var nowdate = LocalDate.now()\n                                        .format(DateTimeFormatter.ofPattern(\"yyyy.MM.dd\"))\n\n                                    //냉장고에 유통기한 지나지 않은 음식 있을 시\n                                    // 가장 임박한 식품 가져오기\n                                    var sheet = task.documents?.get(0)\n                                    var current = sheet.get(\"deadline\").toString()\n                                    if (current < compare) {\n                                        compare = current\n                                        mazinoname = sheet.get(\"name\").toString()  //식품 이름 가져오기\n//                                        fname = fridgename.toString()\n//                                        findex = fridgeindex.toString()\n\n\n                                        val contentIntent = Intent(context, FoodListActivity::class.java)\n                                        contentIntent.putExtra(\"index\", fridgeindex)\n                                        contentIntent.putExtra(\"name\", fridgename)\n\n                                        val contentPendingIntent = PendingIntent.getActivity(\n                                            context,\n                                            NOTIFICATION_ID, // requestCode\n                                            contentIntent, // 알림 클릭 시 이동할 인텐트\n                                            PendingIntent.FLAG_MUTABLE\n                                        )\n                                        val builder1 =\n\n                                            NotificationCompat.Builder(context, CHANNEL_ID)\n                                                .setSmallIcon(R.drawable.ic_launcher_foreground) // 아이콘\n                                                .setContentTitle(\"FFF\") // 제목\n                                                .setContentText(mazinoname + \"의 유통기한이 임박해요! 이웃들에게 나눔을 해보세요!\") // 내용\n                                                .setContentIntent(contentPendingIntent)\n                                                .setPriority(NotificationCompat.PRIORITY_HIGH)\n                                                .setAutoCancel(true)\n                                                .setDefaults(NotificationCompat.DEFAULT_ALL)\n                                        notificationManager?.notify(\n                                            NOTIFICATION_ID,\n                                            builder1.build()\n                                        )\n                                    }\n\n                                    //냉장고 음식이 모두 유통기한이 지났을 시\n                                    if (current < nowdate) {\n//                                        fname = fridgename.toString()\n//                                        findex = fridgeindex.toString()\n                                        val contentIntent = Intent(context, FoodListActivity::class.java)\n                                        contentIntent.putExtra(\"index\", fridgeindex)\n                                        contentIntent.putExtra(\"name\", fridgename)\n\n                                        val contentPendingIntent = PendingIntent.getActivity(\n                                            context,\n                                            NOTIFICATION_ID, // requestCode\n                                            contentIntent, // 알림 클릭 시 이동할 인텐트\n                                            PendingIntent.FLAG_MUTABLE\n                                        )\n                                        val builder2 =\n                                            NotificationCompat.Builder(context, CHANNEL_ID)\n                                                .setSmallIcon(R.drawable.ic_launcher_foreground) // 아이콘\n                                                .setContentTitle(\"FFF\") // 제목\n                                                .setContentText(\"유통기한이 지난 식품이 있어요...\") // 내용\n                                                .setContentIntent(contentPendingIntent)\n                                                .setPriority(NotificationCompat.PRIORITY_HIGH)\n                                                .setAutoCancel(true)\n                                                .setDefaults(NotificationCompat.DEFAULT_ALL)\n                                        notificationManager?.notify(\n                                            NOTIFICATION_ID,\n                                            builder2.build()\n                                        )\n                                        Log.d(\"성공:\", \"${compare}\")\n                                    }\n                                }\n\n                                //냉장고에 음식 없을 시\n                                if (mazinoname == \"\") {\n                                    val contentIntent = Intent(context, FoodListActivity::class.java)\n                                    contentIntent.putExtra(\"index\", fridgeindex)\n                                    contentIntent.putExtra(\"name\", fridgename)\n\n                                    val contentPendingIntent = PendingIntent.getActivity(\n                                        context,\n                                        NOTIFICATION_ID, // requestCode\n                                        contentIntent, // 알림 클릭 시 이동할 인텐트\n                                        PendingIntent.FLAG_MUTABLE\n                                    )\n                                    val builder3 =\n                                        NotificationCompat.Builder(context, CHANNEL_ID)\n                                            .setSmallIcon(R.drawable.ic_launcher_foreground) // 아이콘\n                                            .setContentTitle(\"FFF\") // 제목\n                                            .setContentText(\"냉장고를 채워주세요!\") // 내용\n                                            .setContentIntent(contentPendingIntent)\n                                            .setPriority(NotificationCompat.PRIORITY_HIGH)\n                                            .setAutoCancel(true)\n                                            .setDefaults(NotificationCompat.DEFAULT_ALL)\n                                    notificationManager?.notify(\n                                        NOTIFICATION_ID,\n                                        builder3.build()\n                                    )\n\n                                }\n\n                            }\n                    }\n                }\n\n            }\n\n\n    }\n\n    companion object {\n        private const val NOTIFICATION_ID = 0\n        private const val CHANNEL_ID = \"channel_id\"\n        private const val CHANNEL_NAME = \"ChannelName\"\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/fffroject/AlertReceiver.kt b/app/src/main/java/com/example/fffroject/AlertReceiver.kt
--- a/app/src/main/java/com/example/fffroject/AlertReceiver.kt	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ b/app/src/main/java/com/example/fffroject/AlertReceiver.kt	(date 1671605500311)
@@ -24,13 +24,16 @@
 
 //AlertReceiver class에서 알림 기능을 동작하도록
 class AlertReceiver : BroadcastReceiver() {
+    //파이어스토어
     var auth: FirebaseAuth? = null
     var firestore: FirebaseFirestore? = null
     var user: FirebaseUser? = null
+    
+    //받아오는 냉장고 인덱스, 이름
     var fridgeindex : String? = null
     var fridgename : String? = null
 
-    lateinit var notificationManager: NotificationManager
+    lateinit var notificationManager: NotificationManager  //알람 매니저
 
     //onReceive: 알람 시간이 되었을 때 동작
     @RequiresApi(Build.VERSION_CODES.O)
@@ -49,6 +52,7 @@
         deliverNotification(context)
     }
 
+    //채널 생성
     private fun createNotificationChannel(context: Context) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             val notificationChannel = NotificationChannel(
@@ -66,19 +70,9 @@
         }
     }
 
+    //노티피케이션을 등록
     @RequiresApi(Build.VERSION_CODES.O)
     private fun deliverNotification(context: Context) {
-//        val contentIntent = Intent(context, FoodListActivity::class.java)
-//        contentIntent.putExtra("index", fridgeindex)
-//        contentIntent.putExtra("name", fridgename)
-//
-//        val contentPendingIntent = PendingIntent.getActivity(
-//            context,
-//            NOTIFICATION_ID, // requestCode
-//            contentIntent, // 알림 클릭 시 이동할 인텐트
-//            PendingIntent.FLAG_MUTABLE
-//        )
-
 
         // 내 냉장고에서 status가 true인 것만 불러오기
         firestore?.collection("user")?.document(user!!.uid)?.collection("myfridge")
@@ -88,10 +82,9 @@
                 var count = 0
                 var compare = "3000.12.31" //비교대상
                 var mazinoname = ""  //식품이름
-                var fname = ""
-                var findex = ""
                 count = task.result.size()
 
+                //0이 아니라면
                 if (task.result?.size() != 0) {
                     for (i in 0 until count) {
 
@@ -123,13 +116,10 @@
                                     if (current < compare) {
                                         compare = current
                                         mazinoname = sheet.get("name").toString()  //식품 이름 가져오기
-//                                        fname = fridgename.toString()
-//                                        findex = fridgeindex.toString()
-
 
                                         val contentIntent = Intent(context, FoodListActivity::class.java)
-                                        contentIntent.putExtra("index", fridgeindex)
-                                        contentIntent.putExtra("name", fridgename)
+                                        contentIntent.putExtra("index", fridgeindex) //인덱스
+                                        contentIntent.putExtra("name", fridgename)  //이름
 
                                         val contentPendingIntent = PendingIntent.getActivity(
                                             context,
@@ -137,8 +127,9 @@
                                             contentIntent, // 알림 클릭 시 이동할 인텐트
                                             PendingIntent.FLAG_MUTABLE
                                         )
+
+                                        //NotificationCompat.Builder 객체
                                         val builder1 =
-
                                             NotificationCompat.Builder(context, CHANNEL_ID)
                                                 .setSmallIcon(R.drawable.ic_launcher_foreground) // 아이콘
                                                 .setContentTitle("FFF") // 제목
@@ -155,11 +146,9 @@
 
                                     //냉장고 음식이 모두 유통기한이 지났을 시
                                     if (current < nowdate) {
-//                                        fname = fridgename.toString()
-//                                        findex = fridgeindex.toString()
                                         val contentIntent = Intent(context, FoodListActivity::class.java)
-                                        contentIntent.putExtra("index", fridgeindex)
-                                        contentIntent.putExtra("name", fridgename)
+                                        contentIntent.putExtra("index", fridgeindex)  //인덱스
+                                        contentIntent.putExtra("name", fridgename)    //이름
 
                                         val contentPendingIntent = PendingIntent.getActivity(
                                             context,
@@ -167,6 +156,8 @@
                                             contentIntent, // 알림 클릭 시 이동할 인텐트
                                             PendingIntent.FLAG_MUTABLE
                                         )
+
+                                        //NotificationCompat.Builder 객체
                                         val builder2 =
                                             NotificationCompat.Builder(context, CHANNEL_ID)
                                                 .setSmallIcon(R.drawable.ic_launcher_foreground) // 아이콘
@@ -187,8 +178,8 @@
                                 //냉장고에 음식 없을 시
                                 if (mazinoname == "") {
                                     val contentIntent = Intent(context, FoodListActivity::class.java)
-                                    contentIntent.putExtra("index", fridgeindex)
-                                    contentIntent.putExtra("name", fridgename)
+                                    contentIntent.putExtra("index", fridgeindex)  //인덱스
+                                    contentIntent.putExtra("name", fridgename)    //이름
 
                                     val contentPendingIntent = PendingIntent.getActivity(
                                         context,
@@ -196,6 +187,8 @@
                                         contentIntent, // 알림 클릭 시 이동할 인텐트
                                         PendingIntent.FLAG_MUTABLE
                                     )
+
+                                    //NotificationCompat.Builder 객체
                                     val builder3 =
                                         NotificationCompat.Builder(context, CHANNEL_ID)
                                             .setSmallIcon(R.drawable.ic_launcher_foreground) // 아이콘
@@ -223,7 +216,7 @@
 
     companion object {
         private const val NOTIFICATION_ID = 0
-        private const val CHANNEL_ID = "channel_id"
-        private const val CHANNEL_NAME = "ChannelName"
+        private const val CHANNEL_ID = "channel_id"  //채널 아이디
+        private const val CHANNEL_NAME = "ChannelName"  //채널 이름
     }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/fffroject/FcmActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.fffroject\n\nimport android.app.AlarmManager\nimport android.app.PendingIntent\nimport android.app.TimePickerDialog\nimport android.content.Context\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.icu.util.Calendar\nimport android.os.Build\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.Button\nimport android.widget.CompoundButton\nimport android.widget.TimePicker\nimport android.widget.Toast\nimport androidx.annotation.RequiresApi\nimport com.example.fffroject.databinding.ActivityFcmBinding\nimport java.lang.reflect.Array.getInt\n\n\nclass FcmActivity : AppCompatActivity() {\n\n\n    //알람 시간 변수\n    var myampm: String = \"\"\n    var myhour: Int = -1\n    var mymin: Int = -1\n\n    // 전역 변수로 바인딩 객체 선언\n    private var mBinding: ActivityFcmBinding? = null\n    private var isNoticeOn: Boolean = false\n    // 매번 null 체크를 할 필요 없이 편의성을 위해 바인딩 변수 재 선언\n    private val binding get() = mBinding!!\n\n    @RequiresApi(Build.VERSION_CODES.N)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_fcm)\n\n\n        // 자동 생성된 뷰 바인딩 클래스에서의 inflate라는 메서드를 활용해서\n        // 액티비티에서 사용할 바인딩 클래스의 인스턴스 생성\n        mBinding = ActivityFcmBinding.inflate(layoutInflater)\n        // getRoot 메서드로 레이아웃 내부의 최상위 위치 뷰의\n        // 인스턴스를 활용하여 생성된 뷰를 액티비티에 표시 합니다.\n        setContentView(binding.root)\n\n        // 현재 알람 설정 상태 확인\n        loadNoticeData()\n\n        loadNoticeTime()\n\n        //스위치 현재 상태 확인\n        binding.RefAlarm.setOnCheckedChangeListener(object : CompoundButton.OnCheckedChangeListener{\n            override fun onCheckedChanged(buttonView: CompoundButton?, isChecked: Boolean) {\n                isNoticeOn = if(isChecked){\n                    Toast.makeText(this@FcmActivity, \"냉장고 알림이 켜졌어요!\", Toast.LENGTH_SHORT).show()\n                    true\n                }else{\n                    // on -> off\n                    Toast.makeText(this@FcmActivity, \"냉장고 알림이 꺼졌어요!\", Toast.LENGTH_SHORT).show()\n                    //delAlarm()\n                    false\n                }\n            }\n        })\n\n        fun getTime(button: Button, context: Context) {\n            //if(!isNoticeOn) return\n            val cal = Calendar.getInstance()\n\n\n            val timeSetListener =\n                TimePickerDialog.OnTimeSetListener { timePicker, hour, minute ->\n                    cal.set(Calendar.HOUR_OF_DAY, hour)\n                    cal.set(Calendar.MINUTE, minute)\n\n                    myhour = hour.toInt()\n                    mymin = minute.toInt()\n\n                    if(hour >= 13) {\n                        myampm = \"오후\"\n                        var timestr: Int = myhour - 12\n                        if (timestr in 0..9 && mymin in 0..9) {\n                            binding.Alarm.text = \"오후 0$timestr:0$mymin\"\n                        } else if (timestr in 0..9) {\n                            binding.Alarm.text = \"오후 0$timestr:$mymin\"\n                        } else if (mymin in 0..9) {\n                            binding.Alarm.text = \"오후 $timestr:0$mymin\"\n                        } else {\n                            binding.Alarm.text = \"오후 $timestr:$mymin\"\n                        }\n\n                    } else {\n                        myampm = \"오전\"\n                        if (myhour == 0) {\n                            if (mymin in 0..9) {\n                                binding.Alarm.text = \"오전 12:0$mymin\"\n                            } else {\n                                binding.Alarm.text = \"오전 12:$mymin\"\n                            }\n                        } else if (myhour in 0..9 && mymin in 0..9) {\n                            binding.Alarm.text = \"오전 0$myhour:0$mymin\"\n                        } else if (myhour in 0..9) {\n                            binding.Alarm.text = \"오전 0$myhour:$mymin\"\n                        } else if (mymin in 0..9) {\n                            binding.Alarm.text = \"오전 $myhour:0$mymin\"\n                        } else {\n                            binding.Alarm.text = \"오전 $myhour:$mymin\"\n                        }\n\n\n                    }\n\n\n                    //saveNoticeData(\"noticeStatus\", isNoticeOn)\n                    addAlarm(myhour.toInt(), mymin.toInt())\n                    val pref = getSharedPreferences(\"my_pref\", 0)\n                    val edit = pref.edit()\n                    edit.putInt(\"noticeHour\", myhour)\n                    edit.putInt(\"noticeMinute\", mymin)\n                    edit.apply()\n                    Log.d(\"시간:\", \"${myhour}\")\n\n\n\n                }\n\n            //다이얼로그 생성\n            val dialog = TimePickerDialog(\n                context,\n                android.R.style.Theme_Holo_Light_Dialog_NoActionBar,\n                timeSetListener,\n                cal.get(Calendar.HOUR_OF_DAY),\n                cal.get(Calendar.MINUTE),\n                false\n            )\n            dialog.getWindow()?.setBackgroundDrawableResource(android.R.color.transparent) //\n/*\n            dialog.setButton(TimePickerDialog.BUTTON_POSITIVE, \"확인\",\n                DialogInterface.OnClickListener { dialogInterface, i ->\n                })\n            dialog.setButton(TimePickerDialog.BUTTON_NEGATIVE, \"취소\",\n                DialogInterface.OnClickListener { dialogInterface, i ->\n                    binding.RefAlarm.isChecked = false\n                    delAlarm()\n                })*/\n            dialog.show()\n        }\n\n        binding.Alarm.setOnClickListener {\n            if(isNoticeOn != false) {\n                getTime(binding.Alarm, this)\n            }\n\n        }\n\n\n\n    }\n\n    // 알람 설정\n    fun addAlarm(myhour: Int, mymin: Int){\n\n        // 알람매니저 선언\n        var alarmManager : AlarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\n        var intent = Intent(this, AlertReceiver::class.java)\n\n        var pendingIntent = PendingIntent.getBroadcast(this, 1, intent, PendingIntent.FLAG_IMMUTABLE)\n        var calendar = Calendar.getInstance()\n\n        calendar.set(java.util.Calendar.HOUR_OF_DAY, myhour)  //시간\n        calendar.set(java.util.Calendar.MINUTE, mymin)  //분\n        calendar.set(java.util.Calendar.SECOND, 0)  //초\n\n        // 지나간 시간의 경우 다음날 알람으로 울리도록\n        if(calendar.before(Calendar.getInstance())){\n            calendar.add(Calendar.DATE, 1)  //하루 더하기\n        }\n\n        //이미 예약된 경우 새로 덮어쓰도록\n        alarmManager.setExact(AlarmManager.RTC_WAKEUP, calendar.timeInMillis, pendingIntent)\n\n    }\n\n    // 알람 취소\n    fun delAlarm(){\n        // 알람매니저 선언\n        var alarmManager : AlarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager\n        var intent = Intent(this, AlertReceiver::class.java)\n        //인텐트를 포함하는 인텐트, 사용하는 목적은 현재 앱이 아닌 외부의 앱(노티피케이션, 알람 등)이 현재 내가 개발한 앱을 열 수 있도록 허락할 수 있는 인텐트\n        var pendingIntent = PendingIntent.getBroadcast(this, 1, intent, 0)\n\n        alarmManager.cancel(pendingIntent)\n    }\n\n\n\n    // 현재 알림 설정 상태 불러오기\n    fun loadNoticeData(){\n        val pref = getSharedPreferences(\"my_pref\", MODE_PRIVATE)\n        // 스위치 on/off\n        isNoticeOn = pref.getBoolean(\"noticeStatus\", false)\n        binding.RefAlarm.isChecked = isNoticeOn\n        // on/off 따른 텍스트 색상 변경\n        if(isNoticeOn) {\n            true\n\n        }\n        else {\n            false\n\n        }\n\n\n    }\n    fun loadNoticeTime() {\n        val pref = getSharedPreferences(\"my_pref\", MODE_PRIVATE)\n        myhour = pref.getInt(\"noticeHour\", myhour)\n        mymin = pref.getInt(\"noticeMinute\", mymin)\n        if(myhour >= 13) {\n            myampm = \"오후\"\n            var timestr: Int = myhour - 12\n            if (timestr in 0..9 && mymin in 0..9) {\n                binding.Alarm.text = \"오후 0$timestr:0$mymin\"\n            } else if (timestr in 0..9) {\n                binding.Alarm.text = \"오후 0$timestr:$mymin\"\n            } else if (mymin in 0..9) {\n                binding.Alarm.text = \"오후 $timestr:0$mymin\"\n            } else {\n                binding.Alarm.text = \"오후 $timestr:$mymin\"\n            }\n\n\n        } else {\n            myampm = \"오전\"\n            if (myhour == 0) {\n                if (mymin in 0..9) {\n                    binding.Alarm.text = \"오전 12:0$mymin\"\n                } else {\n                    binding.Alarm.text = \"오전 12:$mymin\"\n                }\n            } else if (myhour in 0..9 && mymin in 0..9) {\n                binding.Alarm.text = \"오전 0$myhour:0$mymin\"\n            } else if (myhour in 0..9) {\n                binding.Alarm.text = \"오전 0$myhour:$mymin\"\n            } else if (mymin in 0..9) {\n                binding.Alarm.text = \"오전 $myhour:0$mymin\"\n            } else {\n                binding.Alarm.text = \"오전 $myhour:$mymin\"\n            }\n\n\n\n/*\n        myhour = pref.getInt(\"noticeHour\", myhour)\n        mymin = pref.getInt(\"noticeMinute\", mymin)\n        binding.Alarm.text = \"$myampm $myhour:$mymin\"\n*/\n\n        }\n    }\n\n\n    // 종료\n    override fun onDestroy() {\n        super.onDestroy()\n\n        // 알림 상태 저장\n        val pref = getSharedPreferences(\"my_pref\", 0)\n        val edit = pref.edit()\n        edit.putBoolean(\"noticeStatus\", isNoticeOn)\n        //edit.putInt(\"noticeHour\", myhour)\n        //edit.putInt(\"noticeMinute\", mymin)\n        edit.apply()\n    }\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/fffroject/FcmActivity.kt b/app/src/main/java/com/example/fffroject/FcmActivity.kt
--- a/app/src/main/java/com/example/fffroject/FcmActivity.kt	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ b/app/src/main/java/com/example/fffroject/FcmActivity.kt	(date 1671605500311)
@@ -49,7 +49,6 @@
 
         // 현재 알람 설정 상태 확인
         loadNoticeData()
-
         loadNoticeTime()
 
         //스위치 현재 상태 확인
@@ -67,32 +66,39 @@
             }
         })
 
+        //현재 시간 가져오기
         fun getTime(button: Button, context: Context) {
             //if(!isNoticeOn) return
             val cal = Calendar.getInstance()
 
-
+            // TimePicker 클릭 이벤트
             val timeSetListener =
                 TimePickerDialog.OnTimeSetListener { timePicker, hour, minute ->
                     cal.set(Calendar.HOUR_OF_DAY, hour)
                     cal.set(Calendar.MINUTE, minute)
 
-                    myhour = hour.toInt()
-                    mymin = minute.toInt()
+                    // 알람 시간 변수 저장
+                    myhour = hour.toInt()  //시간
+                    mymin = minute.toInt()  //분
 
+                    //오후일 때
                     if(hour >= 13) {
                         myampm = "오후"
-                        var timestr: Int = myhour - 12
+                        var timestr: Int = myhour - 12  //myhour - 12 해줘야 12~23시를 1~11시로 표현 가능
                         if (timestr in 0..9 && mymin in 0..9) {
                             binding.Alarm.text = "오후 0$timestr:0$mymin"
+
+                            //시간이 만약 1의 자리일 경우 앞에 0을 넣어주는 함수
                         } else if (timestr in 0..9) {
                             binding.Alarm.text = "오후 0$timestr:$mymin"
                         } else if (mymin in 0..9) {
                             binding.Alarm.text = "오후 $timestr:0$mymin"
+                            //만약 10~11일 경우 그냥 출력
                         } else {
                             binding.Alarm.text = "오후 $timestr:$mymin"
                         }
 
+                    //오전일 때
                     } else {
                         myampm = "오전"
                         if (myhour == 0) {
@@ -103,10 +109,13 @@
                             }
                         } else if (myhour in 0..9 && mymin in 0..9) {
                             binding.Alarm.text = "오전 0$myhour:0$mymin"
+
+                            //시간이 만약 1의 자리일 경우 앞에 0을 넣어주는 함수
                         } else if (myhour in 0..9) {
                             binding.Alarm.text = "오전 0$myhour:$mymin"
                         } else if (mymin in 0..9) {
                             binding.Alarm.text = "오전 $myhour:0$mymin"
+                            //만약 10~11일 경우 그냥 출력
                         } else {
                             binding.Alarm.text = "오전 $myhour:$mymin"
                         }
@@ -114,11 +123,10 @@
 
                     }
 
-
-                    //saveNoticeData("noticeStatus", isNoticeOn)
+                    //시간 저장
                     addAlarm(myhour.toInt(), mymin.toInt())
                     val pref = getSharedPreferences("my_pref", 0)
-                    val edit = pref.edit()
+                    val edit = pref.edit()  //수정
                     edit.putInt("noticeHour", myhour)
                     edit.putInt("noticeMinute", mymin)
                     edit.apply()
@@ -150,6 +158,7 @@
             dialog.show()
         }
 
+        //알람 클릭 시
         binding.Alarm.setOnClickListener {
             if(isNoticeOn != false) {
                 getTime(binding.Alarm, this)
@@ -157,8 +166,6 @@
 
         }
 
-
-
     }
 
     // 알람 설정
@@ -168,6 +175,8 @@
         var alarmManager : AlarmManager = getSystemService(Context.ALARM_SERVICE) as AlarmManager
         var intent = Intent(this, AlertReceiver::class.java)
 
+
+        //AlertReceiver
         var pendingIntent = PendingIntent.getBroadcast(this, 1, intent, PendingIntent.FLAG_IMMUTABLE)
         var calendar = Calendar.getInstance()
 
@@ -218,22 +227,26 @@
     }
     fun loadNoticeTime() {
         val pref = getSharedPreferences("my_pref", MODE_PRIVATE)
-        myhour = pref.getInt("noticeHour", myhour)
-        mymin = pref.getInt("noticeMinute", mymin)
+        myhour = pref.getInt("noticeHour", myhour)  //시간
+        mymin = pref.getInt("noticeMinute", mymin)  //분
+
+        //오후일 때
         if(myhour >= 13) {
             myampm = "오후"
-            var timestr: Int = myhour - 12
+            var timestr: Int = myhour - 12 //myhour - 12 해줘야 12~23시를 1~11시로 표현 가능
             if (timestr in 0..9 && mymin in 0..9) {
                 binding.Alarm.text = "오후 0$timestr:0$mymin"
+                //시간이 만약 1의 자리일 경우 앞에 0을 넣어주는 함수
             } else if (timestr in 0..9) {
                 binding.Alarm.text = "오후 0$timestr:$mymin"
             } else if (mymin in 0..9) {
                 binding.Alarm.text = "오후 $timestr:0$mymin"
+                //만약 10~11일 경우 그냥 출력
             } else {
                 binding.Alarm.text = "오후 $timestr:$mymin"
             }
 
-
+        //오전일 때
         } else {
             myampm = "오전"
             if (myhour == 0) {
@@ -244,22 +257,16 @@
                 }
             } else if (myhour in 0..9 && mymin in 0..9) {
                 binding.Alarm.text = "오전 0$myhour:0$mymin"
+                //시간이 만약 1의 자리일 경우 앞에 0을 넣어주는 함수
             } else if (myhour in 0..9) {
                 binding.Alarm.text = "오전 0$myhour:$mymin"
             } else if (mymin in 0..9) {
                 binding.Alarm.text = "오전 $myhour:0$mymin"
+                //만약 10~11일 경우 그냥 출력
             } else {
                 binding.Alarm.text = "오전 $myhour:$mymin"
             }
 
-
-
-/*
-        myhour = pref.getInt("noticeHour", myhour)
-        mymin = pref.getInt("noticeMinute", mymin)
-        binding.Alarm.text = "$myampm $myhour:$mymin"
-*/
-
         }
     }
 
Index: app/src/main/java/com/example/fffroject/OpenApiActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.fffroject\n\nimport android.content.ContentValues.TAG\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.fffroject.databinding.ActivityOpenApiBinding\nimport com.example.fffroject.fragment.FoodList\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.FirebaseUser\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.zxing.integration.android.IntentIntegrator\nimport org.json.JSONObject\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.net.URL\nimport java.text.SimpleDateFormat\nimport java.time.LocalDate\nimport java.util.*\n\n\nclass OpenApiActivity : AppCompatActivity() {\n    //파이어스토어\n    var auth: FirebaseAuth? = null\n    var firestore: FirebaseFirestore? = null\n    var user: FirebaseUser? = null\n    lateinit var food: ArrayList<food>\n\n    lateinit var name: EditText  //상품명\n    lateinit var count: EditText  //개수\n    lateinit var uploadBtn: Button  //업로드\n    lateinit var deadline:EditText //유통기한\n    lateinit var purchasedAt:EditText //유통기한\n\n\n    lateinit var foodlist: ArrayList<FoodList>\n    lateinit var foodindex: String\n\n    // 전역 변수로 바인딩 객체 선언\n    private var mBinding: ActivityOpenApiBinding? = null\n    // 매번 null 체크를 할 필요 없이 편의성을 위해 바인딩 변수 재 선언\n    private val binding get() = mBinding!!\n\n    var fridgeindex : String? = null\n    var done = false\n\n    val integrator = IntentIntegrator(this)  //context를 넣어줍니다\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_open_api)\n\n        // 자동 생성된 뷰 바인딩 클래스에서의 inflate라는 메서드를 활용해서\n        // 액티비티에서 사용할 바인딩 클래스의 인스턴스 생성\n        mBinding = ActivityOpenApiBinding.inflate(layoutInflater)\n        // getRoot 메서드로 레이아웃 내부의 최상위 위치 뷰의\n        // 인스턴스를 활용하여 생성된 뷰를 액티비티에 표시 합니다.\n        setContentView(binding.root)\n\n        integrator.setBeepEnabled(false) //스캔 시 삡 소리 OFF\n        integrator.setOrientationLocked(false)\n        integrator.setPrompt(\"바코드를 읽어주세요\")//QR 스캐너 하단 메세지 셋팅\n        integrator.initiateScan()  //초기화\n\n        foodlist = arrayListOf<FoodList>()\n\n\n        auth = FirebaseAuth.getInstance()\n        user = auth!!.currentUser\n        firestore = FirebaseFirestore.getInstance()\n/*\n        name = findViewById(R.id.name)\n        deadline_year = findViewById(R.id.fdeadlineYear)\n        deadline_month = findViewById(R.id.fdeadlineMonth)\n        api_layout = findViewById(R.id.apilayout)\n\n        deadline_day = findViewById(R.id.fdeadlineDate)\n        purchasedAt_year = findViewById(R.id.fpurchasedAtYear)\n        purchasedAt_month = findViewById(R.id.fpurchasedAtMonth)\n\n        purchasedAt_day = findViewById(R.id.fpurchasedAtDate)\n        count = findViewById(R.id.count)\n        upload_btn = findViewById(R.id.upload_btn)\n*/\n        fridgeindex = intent.getStringExtra(\"index\")  // 냉장고 id\n\n        //날짜 계산\n        var now = LocalDate.now().toString()\n        var nowdate = now.split(\"-\")\n        binding.fpurchasedAtYear.setText(nowdate[0])\n        binding.fpurchasedAtMonth.setText(nowdate[1])\n        binding.fpurchasedAtDate.setText(nowdate[2])\n\n        // 데이터 추가\n        binding.uploadBtn.setOnClickListener {\n            if (checkAllWritten()) {\n                //화면에 현재 날짜, 시간 정보를 나타내고자 사용\n                var formatter = SimpleDateFormat(\"yyyy.MM.dd\")\n                var food_deadline = binding.fdeadlineYear.text.toString() + \".\" + binding.fdeadlineMonth.text.toString() + \".\" + binding.fdeadlineDate.text.toString()\n                var deadline = formatter.parse(food_deadline).time\n                var purchasedAt = binding.fpurchasedAtYear.text.toString() + \".\" + binding.fpurchasedAtMonth.text.toString() + \".\" + binding.fpurchasedAtDate.text.toString()\n                var day = formatter.parse(purchasedAt).time\n                var d_day = (deadline - day)/ (60 * 60 * 24 * 1000)\n\n                //식품 시간순 정렬\n                val nowTime = System.currentTimeMillis()\n                val timeformatter = SimpleDateFormat(\"yyyy.MM.dd.hh.mm\")\n                val dateTime = timeformatter.format(nowTime)\n\n                if (d_day.toInt() >= 0){\n                    if (user != null) {\n                        var food_deadline =\n                            binding.fdeadlineYear.text.toString() + \".\" + binding.fdeadlineMonth.text.toString() + \".\" + binding.fdeadlineDate.text.toString()\n                        var purchasedAt =\n                            binding.fpurchasedAtYear.text.toString() + \".\" + binding.fpurchasedAtMonth.text.toString() + \".\" + binding.fpurchasedAtDate.text.toString()\n                        foodindex = UUID.randomUUID().toString()\n                        firestore?.collection(\"fridge\")?.document(\"$fridgeindex\")\n                            ?.collection(\"food\")?.document(\"$foodindex\")\n                            ?.set(\n                                hashMapOf(\n                                    \"index\" to foodindex,\n                                    \"name\" to binding.name.text.toString(),\n                                    \"deadline\" to food_deadline,\n                                    \"purchaseAt\" to purchasedAt,\n                                    \"count\" to binding.count.text.toString().toInt(),\n                                    \"done\" to done,\n                                    \"addTime\" to dateTime\n                                )\n                            )\n\n                    }\n                    Toast.makeText(this, \"등록되었습니다.\", Toast.LENGTH_SHORT).show()\n                    finish()\n                }\n                else {\n                    Toast.makeText(this, \"유통기한이 이미 지난 제품입니다.\", Toast.LENGTH_SHORT).show()\n                }\n            } else {\n                Toast.makeText(this, \"내용을 입력하세요.\", Toast.LENGTH_SHORT).show()\n            }\n\n        }\n\n    }\n\n    private fun checkAllWritten(): Boolean{\n        return (binding.name.length()>0 && binding.fdeadlineYear.length()>0 && binding.fdeadlineMonth.length()>0 && binding.fdeadlineDate.length()>0\n                && binding.fpurchasedAtYear.length()>0 && binding.fpurchasedAtMonth.length()>0 && binding.fpurchasedAtDate.length()>0\n                && binding.count.length()>0)\n\n\n    }\n\n\n    // 네트워크를 이용할 때는 쓰레드를 사용해서 접근해야 함\n    inner class NetworkThread(var barcode:String) : Thread() {\n\n        override fun run() {\n            // var apiview = api_layout\n            var key = \"74cb78df7c2b4d38b2f7\"\n            // API 정보를 가지고 있는 주소\n            val site = \"https://openapi.foodsafetykorea.go.kr/api/\"+key+\"/C005/json/1/5/BAR_CD=\"+barcode\n\n            val url = URL(site)\n            val conn = url.openConnection()\n            val input = conn.getInputStream()\n            val isr = InputStreamReader(input)\n            // br: 라인 단위로 데이터를 읽어오기 위해서 만듦\n            val br = BufferedReader(isr)\n\n            // Json 문서는 일단 문자열로 데이터를 모두 읽어온 후, Json에 관련된 객체를 만들어서 데이터를 가져옴\n            var str: String? = null\n            val buf = StringBuffer()\n\n            do {\n                str = br.readLine()\n\n                if (str != null) {\n                    buf.append(str)\n                }\n            } while (str != null)\n\n            /*다른 방식으로 짠 코드\n                        // 전체가 객체로 묶여있기 때문에 객체형태로 가져옴\n            val root = JSONObject(buf.toString())  //받아온 내용 객체로 가져옴\n            var C005 = root.getJSONObject(\"C005\")  //받아온 내용에서 C005객체 가져옴\n            var row = C005.getJSONArray(\"row\")  // 객체 안에 있는 row라는 이름의 리스트를 가져옴&검색 결과 리스트\n            var obj2 = row.getJSONObject(0)\n            //var total_count: String = C005.getString(\"total_count\")  //검색된 총 수량\n            // 화면에 출력\n            runOnUiThread {\n                // 페이지 수만큼 반복하여 데이터를 불러옴\n                for(i in 0 until row.length()) {\n\n                    // 쪽수 별로 데이터를 읽는다.\n                    //append:문자열 추가 메서드\n                    val jObject = row.getJSONObject(i)\n                     var PRDLST_NM: String = jObject.getString(\"PRDLST_NM\") //제품명\n                    //  var POG_DAYCNT: String = jObject.getString(\"POG_DAYCNT\")  //유통기한 일자\n                    // var BAR_CD: String = jObject.getString(\"BAR_CD\")  //바코드\n                   // binding.name.append(\"${ JSON_Parse(jObject,\"PRDLST_NM\")}\\n\")\n                    binding.name.setText(PRDLST_NM)\n                    //textView.append(\"2. 캠핑장 이름: ${JSON_Parse(jObject,\"POG_DAYCNT\")}\\n\")\n                    // Log.d(\"바코드_번호:\", \"${BAR_CD}\")\n                    //  Log.d(\"바코드_제품이름:\", \"${PRDLST_NM}\")\n                    //  Log.d(\"바코드_유통기한:\", \"${POG_DAYCNT}\")\n\n                    //Log.d(\"바코드_제품이름:\", \"${PRDLST_NM}\")\n                    //Log.d(\"바코드_번호:\", \"${BAR_CD}\")\n                    //Log.d(\"바코드_유통기한:\", \"${POG_DAYCNT}\")\n                    //  Log.d(\"바코드_유통기한:\", \"${POG_DAYCNT}\")\n\n                }\n\n            }\n        }\n\n        // 함수를 통해 데이터를 불러온다.\n        fun JSON_Parse(obj:JSONObject, data : String): String {\n\n            // 원하는 정보를 불러와 리턴받고 없는 정보는 캐치하여 \"없습니다.\"로 리턴받는다.\n            return try {\n\n                obj.getString(data)\n\n            } catch (e: Exception) {\n                \"없습니다.\"\n            }\n        }\n    }\n*/\n\n\n            // 전체가 객체로 묶여있기 때문에 객체형태로 가져옴\n            val root = JSONObject(buf.toString())  //받아온 내용 객체로 가져옴\n            var C005 = root.getJSONObject(\"C005\")  //받아온 내용에서 C005객체 가져옴\n            var total_count: String = C005.getString(\"total_count\")  //검색된 총 수량\n\n            //사용자 인터페이스와 관련된 모든 동작은 onCreate () 및 이벤트 처리가 실행되는 주 스레드 또는 UI 스레드에서 수행되어야 함\n            // 다른 스레드에서 동작할 때 에러가 발생-> runOnUiThread를 사용\n            runOnUiThread {\n                if (total_count == \"0\") {\n                    Log.d(\"바코드실패:\",\"해당 상품이 없습니다.\")\n                    Toast.makeText(this@OpenApiActivity, \"해당 상품이 없습니다.\", Toast.LENGTH_LONG).show()\n                }\n                else {\n\n\n                    Log.d(\"스레드로 넘어옴:\", \"${total_count}\")\n                    var row = C005.getJSONArray(\"row\") // 객체 안에 있는 row라는 이름의 리스트를 가져옴&검색 결과 리스트\n                    var obj2 = row.getJSONObject(0)\n                    var result = C005.getJSONObject(\"RESULT\") //결과값\n                    var code: String = result.getString(\"CODE\") //결과코드\n\n                    var PRDLST_NM = obj2.getString(\"PRDLST_NM\")!! //제품명\n                    var POG_DAYCNT: String = obj2.getString(\"POG_DAYCNT\")  //유통기한 일자\n                    var BAR_CD: String = obj2.getString(\"BAR_CD\")  //바코드\n\n                    // 화면에 출력\n                    binding.name.setText(PRDLST_NM)\n                    Log.d(\"바코드_번호:\", \"${BAR_CD}\")\n                    Log.d(\"바코드_제품이름:\", \"${PRDLST_NM}\")\n                    Log.d(\"바코드_유통기한:\", \"${POG_DAYCNT}\")\n                }\n            }\n        }\n    }\n\n\n\n    // QR/바코드 스캔 결과\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        Log.d(TAG, \"onActivityResult: called\")\n        // QR 코드를 찍은 결과를 변수에 담는다.\n        val result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data)\n        //결과가 있으면\n        if (result != null) {\n            //QRCode Scan 성공&컨텐츠가 있으면\n            if (result.contents != null) {\n                // 쓰레드 생성\n                //Toast.makeText(this, \"scanned: ${result.contents}\", Toast.LENGTH_LONG).show()\n                var thread = NetworkThread(result.contents.toString())\n                thread.start()\n                thread.join()\n            } else {\n                Toast.makeText(this, \"Cancelled\", Toast.LENGTH_LONG).show()\n            }\n        }\n        else {\n            super.onActivityResult(requestCode, resultCode, data)\n        }\n    }\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/fffroject/OpenApiActivity.kt b/app/src/main/java/com/example/fffroject/OpenApiActivity.kt
--- a/app/src/main/java/com/example/fffroject/OpenApiActivity.kt	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ b/app/src/main/java/com/example/fffroject/OpenApiActivity.kt	(date 1671605500312)
@@ -69,31 +69,19 @@
         foodlist = arrayListOf<FoodList>()
 
 
+        //파이어스토어
         auth = FirebaseAuth.getInstance()
         user = auth!!.currentUser
         firestore = FirebaseFirestore.getInstance()
-/*
-        name = findViewById(R.id.name)
-        deadline_year = findViewById(R.id.fdeadlineYear)
-        deadline_month = findViewById(R.id.fdeadlineMonth)
-        api_layout = findViewById(R.id.apilayout)
 
-        deadline_day = findViewById(R.id.fdeadlineDate)
-        purchasedAt_year = findViewById(R.id.fpurchasedAtYear)
-        purchasedAt_month = findViewById(R.id.fpurchasedAtMonth)
-
-        purchasedAt_day = findViewById(R.id.fpurchasedAtDate)
-        count = findViewById(R.id.count)
-        upload_btn = findViewById(R.id.upload_btn)
-*/
         fridgeindex = intent.getStringExtra("index")  // 냉장고 id
 
         //날짜 계산
         var now = LocalDate.now().toString()
         var nowdate = now.split("-")
-        binding.fpurchasedAtYear.setText(nowdate[0])
-        binding.fpurchasedAtMonth.setText(nowdate[1])
-        binding.fpurchasedAtDate.setText(nowdate[2])
+        binding.fpurchasedAtYear.setText(nowdate[0])  //년
+        binding.fpurchasedAtMonth.setText(nowdate[1]) //월
+        binding.fpurchasedAtDate.setText(nowdate[2])  //일
 
         // 데이터 추가
         binding.uploadBtn.setOnClickListener {
@@ -113,11 +101,14 @@
 
                 if (d_day.toInt() >= 0){
                     if (user != null) {
+                        //유통기한 형식
                         var food_deadline =
                             binding.fdeadlineYear.text.toString() + "." + binding.fdeadlineMonth.text.toString() + "." + binding.fdeadlineDate.text.toString()
+                        //구매일 형식
                         var purchasedAt =
                             binding.fpurchasedAtYear.text.toString() + "." + binding.fpurchasedAtMonth.text.toString() + "." + binding.fpurchasedAtDate.text.toString()
                         foodindex = UUID.randomUUID().toString()
+                        //food에 저장
                         firestore?.collection("fridge")?.document("$fridgeindex")
                             ?.collection("food")?.document("$foodindex")
                             ?.set(
@@ -147,6 +138,7 @@
 
     }
 
+    //다 작성했는지 확인
     private fun checkAllWritten(): Boolean{
         return (binding.name.length()>0 && binding.fdeadlineYear.length()>0 && binding.fdeadlineMonth.length()>0 && binding.fdeadlineDate.length()>0
                 && binding.fpurchasedAtYear.length()>0 && binding.fpurchasedAtMonth.length()>0 && binding.fpurchasedAtDate.length()>0
@@ -161,14 +153,15 @@
 
         override fun run() {
             // var apiview = api_layout
-            var key = "74cb78df7c2b4d38b2f7"
+            var key = "74cb78df7c2b4d38b2f7"  //사용자 키
             // API 정보를 가지고 있는 주소
             val site = "https://openapi.foodsafetykorea.go.kr/api/"+key+"/C005/json/1/5/BAR_CD="+barcode
 
             val url = URL(site)
-            val conn = url.openConnection()
+            val conn = url.openConnection()  //url객체에서 openConnection() 메서드를 호출하여 연결을 생성
             val input = conn.getInputStream()
             val isr = InputStreamReader(input)
+
             // br: 라인 단위로 데이터를 읽어오기 위해서 만듦
             val br = BufferedReader(isr)
 
Index: app/src/main/java/com/example/fffroject/WriteActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.fffroject\n\nimport android.content.ContentValues.TAG\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport com.example.fffroject.databinding.ActivityOpenApiBinding\nimport com.example.fffroject.databinding.ActivityWriteBinding\nimport com.example.fffroject.fragment.FoodList\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.FirebaseUser\nimport com.google.firebase.firestore.FirebaseFirestore\nimport com.google.zxing.integration.android.IntentIntegrator\nimport org.json.JSONObject\nimport java.io.BufferedReader\nimport java.io.InputStreamReader\nimport java.net.URL\nimport java.text.SimpleDateFormat\nimport java.time.LocalDate\nimport java.util.*\n\n\nclass WriteActivity : AppCompatActivity() {\n    //파이어스토어\n    var auth: FirebaseAuth? = null\n    var firestore: FirebaseFirestore? = null\n    var user: FirebaseUser? = null\n    lateinit var food: ArrayList<food>\n\n    lateinit var name: EditText  //상품명\n    lateinit var count: EditText  //개수\n    lateinit var uploadBtn: Button  //업로드\n    lateinit var deadline:EditText //유통기한\n    lateinit var purchasedAt:EditText //유통기한\n\n\n    lateinit var foodlist: ArrayList<FoodList>\n    lateinit var foodindex: String\n\n    // 전역 변수로 바인딩 객체 선언\n    private var mBinding: ActivityWriteBinding? = null\n    // 매번 null 체크를 할 필요 없이 편의성을 위해 바인딩 변수 재 선언\n    private val binding get() = mBinding!!\n\n    var fridgeindex : String? = null\n    var done = false\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_write)\n\n        // 자동 생성된 뷰 바인딩 클래스에서의 inflate라는 메서드를 활용해서\n        // 액티비티에서 사용할 바인딩 클래스의 인스턴스 생성\n        mBinding = ActivityWriteBinding.inflate(layoutInflater)\n        // getRoot 메서드로 레이아웃 내부의 최상위 위치 뷰의\n        // 인스턴스를 활용하여 생성된 뷰를 액티비티에 표시 합니다.\n        setContentView(binding.root)\n\n        foodlist = arrayListOf<FoodList>()\n\n\n        auth = FirebaseAuth.getInstance()\n        user = auth!!.currentUser\n        firestore = FirebaseFirestore.getInstance()\n/*\n        name = findViewById(R.id.name)\n        deadline_year = findViewById(R.id.fdeadlineYear)\n        deadline_month = findViewById(R.id.fdeadlineMonth)\n        api_layout = findViewById(R.id.apilayout)\n\n        deadline_day = findViewById(R.id.fdeadlineDate)\n        purchasedAt_year = findViewById(R.id.fpurchasedAtYear)\n        purchasedAt_month = findViewById(R.id.fpurchasedAtMonth)\n\n        purchasedAt_day = findViewById(R.id.fpurchasedAtDate)\n        count = findViewById(R.id.count)\n        upload_btn = findViewById(R.id.upload_btn)\n*/\n        fridgeindex = intent.getStringExtra(\"index\")  // 냉장고 id\n\n        //날짜 계산\n        var now = LocalDate.now().toString()\n        var nowdate = now.split(\"-\")\n        binding.fpurchasedAtYear.setText(nowdate[0])\n        binding.fpurchasedAtMonth.setText(nowdate[1])\n        binding.fpurchasedAtDate.setText(nowdate[2])\n\n        // 데이터 추가\n        binding.uploadBtn.setOnClickListener {\n            if (checkAllWritten()) {\n                //화면에 현재 날짜, 시간 정보를 나타내고자 사용\n                var formatter = SimpleDateFormat(\"yyyy.MM.dd\")\n                var food_deadline = binding.fdeadlineYear.text.toString() + \".\" + binding.fdeadlineMonth.text.toString() + \".\" + binding.fdeadlineDate.text.toString()\n                var deadline = formatter.parse(food_deadline).time\n                var purchasedAt = binding.fpurchasedAtYear.text.toString() + \".\" + binding.fpurchasedAtMonth.text.toString() + \".\" + binding.fpurchasedAtDate.text.toString()\n                var day = formatter.parse(purchasedAt).time\n                var d_day = (deadline - day)/ (60 * 60 * 24 * 1000)\n\n                //식품 시간순 정렬\n                val nowTime = System.currentTimeMillis()\n                val timeformatter = SimpleDateFormat(\"yyyy.MM.dd.hh.mm\")\n                val dateTime = timeformatter.format(nowTime)\n\n                if (d_day.toInt() >= 0){\n                    if (user != null) {\n                        var food_deadline =\n                            binding.fdeadlineYear.text.toString() + \".\" + binding.fdeadlineMonth.text.toString() + \".\" + binding.fdeadlineDate.text.toString()\n                        var purchasedAt =\n                            binding.fpurchasedAtYear.text.toString() + \".\" + binding.fpurchasedAtMonth.text.toString() + \".\" + binding.fpurchasedAtDate.text.toString()\n                        foodindex = UUID.randomUUID().toString()\n                        firestore?.collection(\"fridge\")?.document(\"$fridgeindex\")\n                            ?.collection(\"food\")?.document(\"$foodindex\")\n                            ?.set(\n                                hashMapOf(\n                                    \"index\" to foodindex,\n                                    \"name\" to binding.name.text.toString(),\n                                    \"deadline\" to food_deadline,\n                                    \"purchaseAt\" to purchasedAt,\n                                    \"count\" to binding.count.text.toString().toInt(),\n                                    \"done\" to done,\n                                    \"addTime\" to dateTime\n                                )\n                            )\n\n                    }\n                    Toast.makeText(this, \"등록되었습니다.\", Toast.LENGTH_SHORT).show()\n                    val intent = Intent(this, AlertReceiver::class.java)\n                    intent.putExtra(\"index\", fridgeindex)\n                    finish()\n                }\n                else {\n                    Toast.makeText(this, \"유통기한이 이미 지난 제품입니다.\", Toast.LENGTH_SHORT).show()\n                }\n            } else {\n                Toast.makeText(this, \"내용을 입력하세요.\", Toast.LENGTH_SHORT).show()\n            }\n\n        }\n\n    }\n\n    private fun checkAllWritten(): Boolean{\n        return (binding.name.length()>0 && binding.fdeadlineYear.length()>0 && binding.fdeadlineMonth.length()>0 && binding.fdeadlineDate.length()>0\n                && binding.fpurchasedAtYear.length()>0 && binding.fpurchasedAtMonth.length()>0 && binding.fpurchasedAtDate.length()>0\n                && binding.count.length()>0)\n\n\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/fffroject/WriteActivity.kt b/app/src/main/java/com/example/fffroject/WriteActivity.kt
--- a/app/src/main/java/com/example/fffroject/WriteActivity.kt	(revision e76521866c4d0b82d16e1a8be8e3bfda83184996)
+++ b/app/src/main/java/com/example/fffroject/WriteActivity.kt	(date 1671605500312)
@@ -64,31 +64,19 @@
         foodlist = arrayListOf<FoodList>()
 
 
+        //파이어스토어
         auth = FirebaseAuth.getInstance()
         user = auth!!.currentUser
         firestore = FirebaseFirestore.getInstance()
-/*
-        name = findViewById(R.id.name)
-        deadline_year = findViewById(R.id.fdeadlineYear)
-        deadline_month = findViewById(R.id.fdeadlineMonth)
-        api_layout = findViewById(R.id.apilayout)
 
-        deadline_day = findViewById(R.id.fdeadlineDate)
-        purchasedAt_year = findViewById(R.id.fpurchasedAtYear)
-        purchasedAt_month = findViewById(R.id.fpurchasedAtMonth)
-
-        purchasedAt_day = findViewById(R.id.fpurchasedAtDate)
-        count = findViewById(R.id.count)
-        upload_btn = findViewById(R.id.upload_btn)
-*/
         fridgeindex = intent.getStringExtra("index")  // 냉장고 id
 
         //날짜 계산
         var now = LocalDate.now().toString()
         var nowdate = now.split("-")
-        binding.fpurchasedAtYear.setText(nowdate[0])
-        binding.fpurchasedAtMonth.setText(nowdate[1])
-        binding.fpurchasedAtDate.setText(nowdate[2])
+        binding.fpurchasedAtYear.setText(nowdate[0])  //년
+        binding.fpurchasedAtMonth.setText(nowdate[1]) //월
+        binding.fpurchasedAtDate.setText(nowdate[2])  //일
 
         // 데이터 추가
         binding.uploadBtn.setOnClickListener {
@@ -99,7 +87,7 @@
                 var deadline = formatter.parse(food_deadline).time
                 var purchasedAt = binding.fpurchasedAtYear.text.toString() + "." + binding.fpurchasedAtMonth.text.toString() + "." + binding.fpurchasedAtDate.text.toString()
                 var day = formatter.parse(purchasedAt).time
-                var d_day = (deadline - day)/ (60 * 60 * 24 * 1000)
+                var d_day = (deadline - day)/ (60 * 60 * 24 * 1000)  //(각 시간값에 따른 차이점)
 
                 //식품 시간순 정렬
                 val nowTime = System.currentTimeMillis()
@@ -108,11 +96,14 @@
 
                 if (d_day.toInt() >= 0){
                     if (user != null) {
+                        //유통기한 형식
                         var food_deadline =
                             binding.fdeadlineYear.text.toString() + "." + binding.fdeadlineMonth.text.toString() + "." + binding.fdeadlineDate.text.toString()
+                        //구매일 형식
                         var purchasedAt =
                             binding.fpurchasedAtYear.text.toString() + "." + binding.fpurchasedAtMonth.text.toString() + "." + binding.fpurchasedAtDate.text.toString()
                         foodindex = UUID.randomUUID().toString()
+                        //food에 저장
                         firestore?.collection("fridge")?.document("$fridgeindex")
                             ?.collection("food")?.document("$foodindex")
                             ?.set(
@@ -130,7 +121,7 @@
                     }
                     Toast.makeText(this, "등록되었습니다.", Toast.LENGTH_SHORT).show()
                     val intent = Intent(this, AlertReceiver::class.java)
-                    intent.putExtra("index", fridgeindex)
+                    intent.putExtra("index", fridgeindex)  //AlertReceiver에 냉장고인덱스 넘겨주기
                     finish()
                 }
                 else {
@@ -144,12 +135,13 @@
 
     }
 
+
+    //다 작성했는지 확인
     private fun checkAllWritten(): Boolean{
         return (binding.name.length()>0 && binding.fdeadlineYear.length()>0 && binding.fdeadlineMonth.length()>0 && binding.fdeadlineDate.length()>0
                 && binding.fpurchasedAtYear.length()>0 && binding.fpurchasedAtMonth.length()>0 && binding.fpurchasedAtDate.length()>0
                 && binding.count.length()>0)
 
-
     }
 
 }
\ No newline at end of file
